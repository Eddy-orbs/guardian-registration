{"version":3,"sources":["serviceWorker.ts","store/CryptoWalletConnectionStore.ts","utils/utils.ts","constants/ethereumErrorCodes.ts","store/OrbsAccountStore.ts","services/guardiansV2Service/GuardiansV2ServiceConstants.ts","services/cryptoWalletConnectionService/CryptoWalletConnectionService.ts","configs.ts","services/OrbsClientFactory.ts","services/guardiansV2Service/GuardiansV2Service.ts","theme/Theme.tsx","store/storesInitialization.ts","AppWrapper.tsx","services/Services.ts","components/InTextLink.tsx","pages/NoEthereumProviderSection.tsx","components/structure/ContentContainer.tsx","components/structure/Background.tsx","components/structure/Header.tsx","components/structure/Page.tsx","pages/NoEthereumProviderPage.tsx","store/storeHooks.ts","pages/GuardiandRegisterOrEdit/forms/GuradiansDetailsForm.tsx","index.tsx","pages/GuardiandRegisterOrEdit/EditGuardianInfoSection.tsx","pages/GuardiandRegisterOrEdit/RegisterGuardianSection.tsx","pages/GuardiandRegisterOrEdit/forms/RewardsDistributionFrequencyForm.tsx","pages/GuardiandRegisterOrEdit/EditRewardsDistributionSection.tsx","components/structure/ContentFitting.tsx","pages/GuardiandRegisterOrEdit/GuardianRegisterOrEditPage.tsx","components/structure/Footer.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","CryptoWalletConnectionStore","action","cryptoWalletConnectionService","addressCheckingInterval","undefined","reactionToWalletConnection","this","hasEthereumProvider","hasEventsSupport","reaction","isConnectedToWallet","isConnected","a","readInformationFromConnectedWallet","fireImmediately","onMainAddressChange","address","setMainAddress","readMainAddress","then","setInterval","requestConnectionPermission","permissionGranted","setWalletConnectionRequestApproved","walletConnectionRequestApproved","walletAddress","requestApproved","mainAddress","didUserApproveDappInThePast","observable","computed","ipvHexToV4","ipHex","slice","map","ipHexPart","parseInt","join","ipv4ToHex","ipv4","manualToHex","split","ipSection","toString","padStart","JSON_RPC_ERROR_CODES","userRejectedRequest","unauthorized","unsupportedMethod","emptyGuardianInfo","orbsAddr","ip","website","name","emptyGuardianContractInteractionTimes","registrationTime","lastUpdateTime","OrbsAccountStore","cryptoWalletIntegrationStore","guardiansV2Service","addressChangeReaction","setDoneLoading","reactToConnectedAddressChanged","promievent","resetTxIndicators","setTxPending","console","log","code","setTxCanceled","guardianRegistrationPayload","promiEvent","registerGuardian","handlePromievent","manuallyReadAccountData","setTxHadError","error","guardianUpdatePayload","updateGuardianInfo","frequencyInHours","frequencyInSeconds","setGuardianDistributionFrequency","currentAddress","setDefaultAccountAddress","refreshAccountListeners","readDataForAccount","failLoadingProcess","accountAddress","setFromAccount","readAndSetIsGuardian","isGuardian","readAndSetGuardianInfo","catch","e","readAndSetRewardsDistributionFrequency","readAndSetEthereumBalance","isRegisteredGuardian","setIsGuardian","readGuardianInfo","guardianInfoResponse","guardianInfo","guardianRegistrationTimeInfo","setGuardianInfo","setGuardianContractInteractionTimes","readGuardianDistributionFrequencyInSeconds","setRewardDistributionFrequencyInHours","readEthereumBalance","ethBalance","setEthereumBalance","cancelAllCurrentSubscriptions","setErrorLoading","doneLoading","errorLoading","txPending","txCanceled","txHadError","guardianContractInteractionTimes","rewardDistributionFrequencyInHours","ethereumBalance","CryptoWalletConnectionService","ethereum","web3","isMetamaskInstalled","isSemiCompliantEthereumProviderInstalled","isMetaMask","Web3","onFunction","on","enable","networkVersion","eth","getBalance","balance","balanceInDecimal","fromWei","getAccounts","accounts","getBlockNumber","onChange","Error","listener","off","selectedAddress","INFURA_KEY","process","REACT_APP_ETHEREUM_NETWORK","REACT_APP_INFURA_KEY","configs","urlBase","PUBLIC_BASE_PATH","v2contractsAddressesOverride","ETHEREUM_PROVIDER_WS","privacyPolicyUrl","termsOfUseUrl","ORBS_NODE_URL","GuardiansV2Service","guardiansRegistrationAddress","guardiansRegistrationContract","Contract","GuardiansRegistrationContractJson","abi","options","from","methods","isRegistered","call","getGuardianData","rawResponse","registration_time","last_update_time","contact","getMetadata","rewardsFrequency","length","setMetadata","send","ipAsHex","updateGuardian","baseTheme","responsiveFontSizes","createMuiTheme","palette","type","primary","main","secondary","text","background","default","typography","overrides","MuiPaper","root","MuiTypography","colorPrimary","MuiLink","configure","enforceActions","services","ethereumProvider","orbsClient","createAccount","publicKey","privateKey","signer","LocalSigner","Client","NetworkType","NETWORK_TYPE_TEST_NET","BuildOrbsClient","orbsClientService","OrbsClientService","providers","WebsocketProvider","cryptoWalletIntegrationService","guardiansRegistration","guardiansService","GuardiansService","buildServices","stores","orbsAccountStore","getStores","AppWrapper","React","memo","props","appComponent","StylesProvider","injectFirst","ThemeProvider","theme","maxSnack","useStyles","makeStyles","link","color","light","InTextLink","classes","href","others","className","target","rel","noEthereumProviderSection","display","flexDirection","alignItems","textAlign","padding","backgroundColor","borderRadius","width","maxWidth","boxSizing","NoEthereumProviderSection","walletConnectionPhase","actionFunction","tickerValue","pressedOnInstall","useBoolean","shouldDisplayLegalTicker","buttonIsEnabled","value","isInstall","titleText","subTitleText","buttonText","innerHtmlForLegalAgreement","renderToString","Typography","style","marginBottom","variant","Button","onClick","disabled","FormControlLabel","marginTop","control","Checkbox","checked","setValue","label","dangerouslySetInnerHTML","__html","centeredContainer","height","ContentContainer","useTheme","smallOrSmaller","useMediaQuery","breakpoints","down","Container","component","disableGutters","Background","withStyles","createStyles","zIndex","position","overflow","appVersion","bottom","left","triangle","opacity","fill","svgElm","top","transform","animation","id","xmlns","viewBox","d","title","flexGrow","Header","AppBar","Toolbar","page","backdrop","drawer","Page","children","NoEthereumProviderPage","hasPressed","installMetaMask","useCallback","open","setTrue","CssBaseline","useStores","useContext","MobXProviderContext","useCryptoWalletIntegrationStore","useOrbsAccountStore","ETHEREUM_ADDRESS_REGEX","IP_REGEX","validURL","str","RegExp","test","AppComponent","textField","GuardiansDetailsForm","guardianInitialInfo","guardianAddress","submitInfo","actionButtonTitle","disableSubmit","messageForDisabledSubmit","useForm","register","handleSubmit","errors","useStateful","ipAddress","nodeAddress","errorNodeAddress","errorIPAddress","errorWebsite","nameSetValue","websiteSetValue","ipAddressSetValue","nodeAddressSetValue","useEffect","submit","formData","onSubmit","TextField","required","inputRef","fullWidth","helperText","validate","pattern","avatar","margin","spacing","marginLeft","marginRight","EditGuardianInfoSection","updateGuardianDetails","lastUpdateDate","useMemo","fromUnixTime","Avatar","alignContent","textOverflow","whiteSpace","items","enter","leave","update","toggle","toLocaleString","emptyInitialInfo","RegisterGuardianSection","shouldDisable","messageToExplainDisable","RewardsDistributionFrequencyForm","currentFrequencyInHours","updateRewardsFrequency","isUsingDefaultValue","userWantsToChangeDefault","frequency","useNumber","Math","max","lowerLimit","setFreq","errorRewardsFrequency","rewardsFrequencyInHours","submitUpdate","freqFullDays","floor","freqRemainingHours","daysText","hoursText","middleText","commentText","currentFreqInHumanText","fontWeight","initial","min","EditRewardsDistributionSection","contentFitter","ContentFitting","GuardiansRegisterOrEditPage","observer","content","enqueueSnackbar","useSnackbar","message","Divider","isUsingDefaultRewardFrequency","Backdrop","CircularProgress","bottomAppBar","justifyContent","paddingRight","paddingLeft","Footer","trigger","useScrollTrigger","Slide","appear","direction","in","version","paddingInlineEnd","justifySelf","app","flex","App","appContent","path","askToConnect","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0134c440.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { action, computed, observable, reaction } from \"mobx\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { IReactionDisposer } from \"mobx/lib/core/reaction\";\n\nexport class CryptoWalletConnectionStore {\n  @observable private walletConnectionRequestApproved: boolean = false;\n\n  @observable public hasEthereumProvider: boolean;\n  @observable public hasEventsSupport: boolean;\n\n  @observable public mainAddress: string = \"\";\n\n  private addressCheckingInterval?: NodeJS.Timeout = undefined;\n  reactionToWalletConnection: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletConnectionService: ICryptoWalletConnectionService\n  ) {\n    this.hasEthereumProvider =\n      cryptoWalletConnectionService.hasEthereumProvider;\n    this.hasEventsSupport = cryptoWalletConnectionService.hasEventsSupport;\n\n    this.reactionToWalletConnection = reaction(\n      () => this.isConnectedToWallet,\n      async (isConnected) => {\n        if (isConnected) {\n          this.readInformationFromConnectedWallet();\n        }\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n\n    if (this.hasEthereumProvider) {\n      // We will only detect address change if the Ethereum provider can support it\n      if (this.cryptoWalletConnectionService.hasEventsSupport) {\n        this.cryptoWalletConnectionService.onMainAddressChange((address) =>\n          this.setMainAddress(address)\n        );\n      } else {\n        // Else, we will read it one time + set an interval\n        this.cryptoWalletConnectionService\n          .readMainAddress()\n          .then((address) => this.setMainAddress(address));\n\n        this.addressCheckingInterval = setInterval(\n          () =>\n            this.cryptoWalletConnectionService\n              .readMainAddress()\n              .then((address) => this.setMainAddress(address)),\n          1000\n        );\n      }\n    }\n  }\n\n  @computed\n  public get isConnectedToWallet(): boolean {\n    return (\n      this.hasEthereumProvider &&\n      (this.cryptoWalletConnectionService.didUserApproveDappInThePast ||\n        this.walletConnectionRequestApproved)\n    );\n  }\n\n  public async askToConnect(): Promise<boolean> {\n    if (this.isConnectedToWallet) {\n      return true;\n    } else {\n      const permissionGranted = await this.cryptoWalletConnectionService.requestConnectionPermission();\n      this.setWalletConnectionRequestApproved(permissionGranted);\n\n      return this.walletConnectionRequestApproved;\n    }\n  }\n\n  private async readInformationFromConnectedWallet() {\n    const walletAddress = await this.cryptoWalletConnectionService.readMainAddress();\n\n    this.setMainAddress(walletAddress);\n  }\n\n  @action(\"setWalletConnectionRequestApproved\")\n  private setWalletConnectionRequestApproved(requestApproved: boolean) {\n    this.walletConnectionRequestApproved = requestApproved;\n  }\n\n  @action(\"setMainAddress\")\n  private setMainAddress(mainAddress: string) {\n    this.mainAddress = mainAddress;\n  }\n}\n","export const ipvHexToV4 = (ipHex: string) => {\n  const withoutPrefix = ipHex.slice(2);\n\n  const part1 = ipHex.slice(2, 4);\n  const part2 = ipHex.slice(4, 6);\n  const part3 = ipHex.slice(6, 8);\n  const part4 = ipHex.slice(8);\n  const parts = [part1, part2, part3, part4];\n\n  const toV4 = parts.map((ipHexPart) => parseInt(ipHexPart, 16)).join(\".\");\n\n  return toV4;\n};\n\nexport const ipv4ToHex = (ipv4: string) => {\n  const manualToHex = ipv4\n    .split(\".\")\n    .map((ipSection) => parseInt(ipSection).toString(16).padStart(2, \"0\"))\n    .join(\"\");\n\n  // Add the prefix\n  const ipAsHex = `0x${manualToHex}`;\n\n  return ipAsHex;\n};\n","// DEV_NOTE : Taken from typeless library 'eth-json-rpc-errors';\nexport const JSON_RPC_ERROR_CODES = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603,\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n  },\n};\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  observable,\n  reaction,\n} from \"mobx\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport {\n  IGuardiansV2Service,\n  TGuardianInfoResponse,\n  TGuardianRegistrationPayload,\n  TGuardianUpdatePayload,\n} from \"../services/guardiansV2Service/IGuardiansV2Service\";\nimport { EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE } from \"../services/guardiansV2Service/GuardiansV2ServiceConstants\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport { ipvHexToV4 } from \"../utils/utils\";\nimport { JSON_RPC_ERROR_CODES } from \"../constants/ethereumErrorCodes\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\n\nexport type TGuardianInfo = {\n  ip: string;\n  orbsAddr: string;\n  name: string;\n  website: string;\n  // contact: string;\n};\n\nexport type TGuardianContractInteractionTimes = {\n  /**\n   * Unix timestamp\n   */\n  registrationTime: number;\n  /**\n   * Unix timestamp\n   */\n  lastUpdateTime: number;\n};\n\nconst emptyGuardianInfo: TGuardianInfo = {\n  orbsAddr: \"\",\n  // contact: \"\",\n  ip: \"\",\n  website: \"\",\n  name: \"\",\n};\n\nconst emptyGuardianContractInteractionTimes: TGuardianContractInteractionTimes = {\n  registrationTime: 0,\n  lastUpdateTime: 0,\n};\n\nconst ONE_HOUR_IN_SECONDS = 60 * 60;\n\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport class OrbsAccountStore {\n  @observable public doneLoading = false;\n  @observable public errorLoading = false;\n  @observable public txPending = false;\n  @observable public txHadError = false;\n  @observable public txCanceled = false;\n  @observable public isGuardian = false;\n  @observable public guardianInfo: TGuardianInfo = emptyGuardianInfo;\n  @observable\n  public guardianContractInteractionTimes: TGuardianContractInteractionTimes = emptyGuardianContractInteractionTimes;\n  @observable\n  public rewardDistributionFrequencyInHours: number = EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE;\n  @observable public ethBalance = 0;\n\n  private addressChangeReaction: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private guardiansV2Service: IGuardiansV2Service,\n    private cryptoWalletConnectionService: ICryptoWalletConnectionService\n  ) {\n    this.addressChangeReaction = reaction(\n      () => this.cryptoWalletIntegrationStore.mainAddress,\n      async (address) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedAddressChanged(address);\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Computed values ****\n  @computed public get isUsingDefaultRewardFrequency(): boolean {\n    return (\n      this.rewardDistributionFrequencyInHours ===\n      EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE\n    );\n  }\n\n  // **** Contract interactions ****\n  private async handlePromievent(\n    promievent: PromiEvent<TransactionReceipt>,\n    name = \"A promivent\"\n  ): Promise<void> {\n    this.resetTxIndicators();\n\n    // Indicate tx is pending\n    this.setTxPending(true);\n    console.log(`Waiting for promievent of ${name}`);\n\n    try {\n      const res = await promievent;\n      console.log(`Got Results for promievent of ${name}`);\n      return;\n    } catch (e) {\n      if (\n        (e as any).code === JSON_RPC_ERROR_CODES.provider.userRejectedRequest\n      ) {\n        this.setTxCanceled(true);\n      } else {\n        throw e;\n      }\n    } finally {\n      this.setTxPending(false);\n    }\n  }\n\n  public async registerGuardian(\n    guardianRegistrationPayload: TGuardianRegistrationPayload\n  ) {\n    try {\n      const promiEvent = this.guardiansV2Service.registerGuardian(\n        guardianRegistrationPayload\n      );\n\n      await this.handlePromievent(promiEvent, \"Register guardian\");\n\n      // After registering, lets re-read the data\n      await this.manuallyReadAccountData();\n    } catch (e) {\n      this.setTxHadError(true);\n      // TODO : Handle the error\n      console.error(`Failed registering guardian ${e}`);\n      throw e;\n    }\n  }\n\n  public async updateGuardianInfo(\n    guardianUpdatePayload: TGuardianUpdatePayload\n  ) {\n    try {\n      const promiEvent = this.guardiansV2Service.updateGuardianInfo(\n        guardianUpdatePayload\n      );\n\n      const res = await this.handlePromievent(promiEvent, \"Update guardian\");\n\n      // After registering, lets re-read the data\n      await this.manuallyReadAccountData();\n    } catch (e) {\n      this.setTxHadError(true);\n      // TODO : Handle the error\n      console.error(`Failed updating guardian info ${e}`);\n      throw e;\n    }\n  }\n\n  public async setGuardianDistributionFrequency(frequencyInHours: number) {\n    const frequencyInSeconds = frequencyInHours * ONE_HOUR_IN_SECONDS;\n\n    const promiEvent = this.guardiansV2Service.setGuardianDistributionFrequency(\n      frequencyInSeconds\n    );\n\n    try {\n      await this.handlePromievent(promiEvent, \"Set distribution frequency\");\n\n      // After updating, lets re-read the data\n      await this.manuallyReadAccountData();\n    } catch (e) {\n      // TODO : Handle the error\n      console.error(`Failed setting distribution frequency ${e}`);\n      throw e;\n    }\n  }\n\n  // **** Current address changed ****\n\n  private async reactToConnectedAddressChanged(currentAddress: string) {\n    if (currentAddress) {\n      this.setDefaultAccountAddress(currentAddress);\n\n      if (this.cryptoWalletIntegrationStore.hasEventsSupport) {\n        this.refreshAccountListeners(currentAddress);\n      }\n\n      try {\n        await this.readDataForAccount(currentAddress);\n      } catch (e) {\n        this.failLoadingProcess(e);\n        console.error(\n          \"Error in reacting to address change in Orbs Account Store\",\n          e\n        );\n      }\n    }\n  }\n\n  private setDefaultAccountAddress(accountAddress: string) {\n    this.guardiansV2Service.setFromAccount(accountAddress);\n    // this.stakingService.setFromAccount(accountAddress);\n    // this.orbsTokenService.setFromAccount(accountAddress);\n  }\n\n  // **** Data reading and setting ****\n\n  public async manuallyReadAccountData() {\n    try {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    } catch (e) {\n      this.failLoadingProcess(e);\n      console.error(\n        \"Error in manually reading address data in Orbs Account Store\",\n        e\n      );\n    }\n  }\n\n  private async readDataForAccount(accountAddress: string) {\n    // DEV_NOTE: We wait to check if this account is a Guardian because it\n    //           Affects on whether we need to read more data or not.\n    try {\n      await this.readAndSetIsGuardian(accountAddress);\n    } catch (e) {\n      console.error(`Error read-n-set isGuardian ${e}`);\n    }\n\n    if (this.isGuardian) {\n      this.readAndSetGuardianInfo(accountAddress).catch((e) =>\n        console.error(`Error read-n-set Guardian Info ${e}`)\n      );\n\n      this.readAndSetRewardsDistributionFrequency(accountAddress).catch((e) =>\n        console.error(`Error read-n-set Rewards Frequency ${e}`)\n      );\n    }\n\n    this.readAndSetEthereumBalance(accountAddress).catch((e) =>\n      console.error(`Error read-n-set Ethereum balance ${e}`)\n    );\n  }\n\n  private async readAndSetIsGuardian(accountAddress: string) {\n    const isGuardian = await this.guardiansV2Service.isRegisteredGuardian(\n      accountAddress\n    );\n    this.setIsGuardian(isGuardian);\n  }\n\n  private async readAndSetGuardianInfo(accountAddress: string) {\n    this.guardiansV2Service\n      .readGuardianInfo(accountAddress)\n      .then((guardianInfoResponse) => {\n        const {\n          name,\n          website,\n          orbsAddr,\n          ip,\n          // contact,\n          registrationTime,\n          lastUpdateTime,\n        } = guardianInfoResponse;\n\n        // DEV_NOTE : We update two different observables, one for the actual data, and the other for\n        //            the creation and editing time.\n        const guardianInfo: TGuardianInfo = {\n          name,\n          website,\n          ip: ipvHexToV4(ip),\n          // contact,\n          orbsAddr,\n        };\n\n        const guardianRegistrationTimeInfo: TGuardianContractInteractionTimes = {\n          registrationTime,\n          lastUpdateTime,\n        };\n\n        this.setGuardianInfo(guardianInfo);\n        this.setGuardianContractInteractionTimes(guardianRegistrationTimeInfo);\n      });\n  }\n\n  private async readAndSetRewardsDistributionFrequency(accountAddress: string) {\n    const frequencyInSeconds = await this.guardiansV2Service.readGuardianDistributionFrequencyInSeconds(\n      accountAddress\n    );\n\n    const frequencyInHours = frequencyInSeconds / ONE_HOUR_IN_SECONDS;\n\n    this.setRewardDistributionFrequencyInHours(frequencyInHours);\n  }\n\n  private async readAndSetEthereumBalance(accountAddress: string) {\n    const ethBalance = await this.cryptoWalletConnectionService.readEthereumBalance(\n      accountAddress\n    );\n\n    this.setEthereumBalance(ethBalance);\n  }\n\n  // ****  Subscriptions ****\n\n  private async refreshAccountListeners(accountAddress: string) {\n    this.cancelAllCurrentSubscriptions();\n  }\n\n  private cancelAllCurrentSubscriptions() {}\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private resetTxIndicators() {\n    this.setTxPending(false);\n    this.setTxHadError(false);\n    this.setTxCanceled(false);\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setTxPending\")\n  private setTxPending(txPending: boolean) {\n    this.txPending = txPending;\n  }\n\n  @action(\"setTxCanceled\")\n  private setTxCanceled(txCanceled: boolean) {\n    this.txCanceled = txCanceled;\n  }\n\n  @action(\"setTxHadError\")\n  private setTxHadError(txHadError: boolean) {\n    this.txHadError = txHadError;\n  }\n\n  @action(\"setIsGuardian\")\n  private setIsGuardian(isGuardian: boolean) {\n    this.isGuardian = isGuardian;\n  }\n\n  @action(\"setGuardianInfo\")\n  private setGuardianInfo(guardianInfo: TGuardianInfo) {\n    this.guardianInfo = guardianInfo;\n  }\n\n  @action(\"setGuardianRegistrationTimes\")\n  private setGuardianContractInteractionTimes(\n    guardianContractInteractionTimes: TGuardianContractInteractionTimes\n  ) {\n    this.guardianContractInteractionTimes = guardianContractInteractionTimes;\n  }\n\n  @action(\"setRewardDistributionFrequencyInHours\")\n  private setRewardDistributionFrequencyInHours(\n    rewardDistributionFrequencyInHours: number\n  ) {\n    this.rewardDistributionFrequencyInHours = rewardDistributionFrequencyInHours;\n  }\n\n  @action(\"setEthereumBalance\")\n  private setEthereumBalance(ethereumBalance: number) {\n    this.ethBalance = ethereumBalance;\n  }\n}\n","export const REWARDS_FREQUENCY_KEY = \"REWARDS_FREQUENCY_SEC\";\n\n/**\n * The value that will return for a guardian that did not change its distribution frequency.\n */\nexport const EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE = 0;\n\nexport const GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS = 12;\n","import Web3 from \"web3\";\nimport { ICryptoWalletConnectionService } from \"./ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"./IEthereumProvider\";\nimport { fromWei, toDecimal } from \"web3-utils\";\n\n// TODO : FUTURE : O.L : IMPORTANT : Get this service and all other common services into a package\n//        To be used by all web-products.\n// TODO : FUTURE : O.L : Change all ethereum.<call> to the new standard events format.\nexport class CryptoWalletConnectionService\n  implements ICryptoWalletConnectionService {\n  private readonly web3?: Web3;\n  public readonly hasEthereumProvider: boolean;\n  public readonly hasEventsSupport: boolean;\n  public readonly isMetamaskInstalled: boolean;\n  public readonly isSemiCompliantEthereumProviderInstalled: boolean;\n\n  constructor(private ethereum: IEthereumProvider) {\n    this.hasEthereumProvider = this.ethereum !== undefined;\n\n    // Distinguishes between installed ethereum providers\n    this.isMetamaskInstalled =\n      this.hasEthereumProvider && !!this.ethereum.isMetaMask;\n    this.isSemiCompliantEthereumProviderInstalled =\n      this.hasEthereumProvider && !this.ethereum.isMetaMask;\n\n    if (this.hasEthereumProvider) {\n      this.web3 = new Web3(this.ethereum as any);\n    }\n\n    const onFunction = this.hasEthereumProvider ? this.ethereum.on : undefined;\n    this.hasEventsSupport = onFunction !== undefined && onFunction !== null;\n  }\n\n  public async requestConnectionPermission(): Promise<boolean> {\n    try {\n      await this.ethereum.enable();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Getters\n  public get didUserApproveDappInThePast(): boolean {\n    // DEV_NOTE : O.L : IMPORTANT ! : This currently works with the soon to be deprecated apis of metamask injected 'ethereum'\n    //                                and is not part of the properties in the official types of web3.\n    //                                We need to check and find a better way to detect if the user has already approved wallet access.\n    // @ts-ignore\n    return this.isMetamaskInstalled && !!this.ethereum.selectedAddress;\n  }\n\n  async getIsMainNetwork(): Promise<boolean> {\n    return this.isMetamaskInstalled && this.ethereum.networkVersion === \"1\";\n  }\n\n  // Data \"reading\"\n  async readEthereumBalance(address: string): Promise<number> {\n    const balance = await this.web3?.eth.getBalance(address);\n    const balanceInDecimal = parseInt(fromWei(balance || \"0\"));\n    return balanceInDecimal;\n  }\n\n  async readMainAddress(): Promise<string> {\n    const accounts = (await this.web3?.eth.getAccounts()) || [];\n    return accounts[0];\n  }\n\n  async readCurrentBlockNumber(): Promise<number> {\n    return this.web3?.eth.getBlockNumber() || 0;\n  }\n\n  // Event listeners\n  onMainAddressChange(onChange: (mainAddress: string) => void): () => void {\n    if (!this.hasEventsSupport) {\n      throw new Error(\n        `Cannot subscribe to events with given Ethereum provider`\n      );\n    }\n\n    const listener = (accounts: string[]) => onChange(accounts[0]);\n\n    this.ethereum.on(\"accountsChanged\", listener);\n\n    return () => {\n      this.ethereum.off(\"accountsChanged\", listener);\n    };\n  }\n}\n","import { IOrbsPosContractsAddresses } from \"orbs-pos-data\";\n\n/**\n * Copyright 2019 the prism authors\n * This file is part of the prism library in the Orbs project.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n * The above notice should be included in all copies or substantial portions of the software.\n */\n\ntype TSupportedNets = \"local\" | \"ropsten\" | \"mainnet\";\n// @ts-ignore\nconst ethereumNetwork: TSupportedNets = process.env.REACT_APP_ETHEREUM_NETWORK;\n\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY;\nexport const IS_DEV = process.env.NODE_ENV !== \"production\";\nconst SHOULD_OVERRIDE_ADDRESS = IS_DEV || ethereumNetwork === \"ropsten\";\n\n////////////// CONFIG VARIABLES ///////////////\ninterface IConfig {\n  urlBase: string;\n  v2contractsAddressesOverride: Partial<{\n    guardiansRegistration: string;\n  }>;\n  ETHEREUM_PROVIDER_WS: string;\n\n  termsOfUseUrl: string;\n  privacyPolicyUrl: string;\n}\n\nconst configs: IConfig = {\n  urlBase: process.env.PUBLIC_BASE_PATH || \"\",\n  v2contractsAddressesOverride: {},\n  ETHEREUM_PROVIDER_WS: `wss://mainnet.infura.io/ws/v3/${INFURA_KEY}`,\n\n  privacyPolicyUrl: \"https://www.orbs.com/guardian-portal-privacy-policy/\",\n  termsOfUseUrl: \"https://www.orbs.com/guardian-portal-terms-of-use/\",\n};\n\n// Webpack will remove this section on production build //\nif (process.env.NODE_ENV !== \"production\") {\n  if (ethereumNetwork === \"local\") {\n    const addresses = require(\"./local/addresses.json\");\n\n    configs.v2contractsAddressesOverride.guardiansRegistration =\n      addresses.guardiansRegistration;\n  }\n}\n\nexport default configs;\n","import { Client, createAccount, NetworkType } from \"orbs-client-sdk\";\nimport { LocalSigner } from \"orbs-client-sdk\";\n\n// TODO : IMPORTANT : O.L : This file is a duplicate from 'staking wallet', extract it to a common code.\n\nconst ORBS_VIRTUAL_CHAIN_ID = 1_100_000; // The virtual chain Id on the Orbs network\nconst ORBS_NODE_ADDRESS = \"validator.orbs.com\"; // The Orbs node that we will query\nconst PROTOCOL = \"https\";\nconst ORBS_NODE_URL = `${PROTOCOL}://${ORBS_NODE_ADDRESS}/vchains/${ORBS_VIRTUAL_CHAIN_ID.toString()}`;\n\nexport function BuildOrbsClient(): Client {\n  const { publicKey, privateKey } = createAccount();\n  const signer = new LocalSigner({ publicKey, privateKey });\n  return new Client(\n    ORBS_NODE_URL,\n    ORBS_VIRTUAL_CHAIN_ID,\n    NetworkType.NETWORK_TYPE_TEST_NET,\n    signer\n  );\n}\n","import Web3 from \"web3\";\nimport { Contract } from \"web3-eth-contract\";\nimport { AbiItem } from \"web3-utils\";\nimport ValidatorsRegistrationContractJson from \"@orbs-network/orbs-ethereum-contracts-v2/build/contracts/ValidatorsRegistration.json\";\nimport GuardiansRegistrationContractJson from \"@orbs-network/orbs-ethereum-contracts-v2/build/contracts/GuardiansRegistration.json\";\nimport {\n  IGuardiansV2Service,\n  TGuardianInfoResponse,\n  TGuardianRegistrationPayload,\n  TGuardianUpdatePayload,\n} from \"./IGuardiansV2Service\";\nimport { ValidatorsRegistration } from \"../../contracts/ValidatorsRegistration\";\nimport { GuardiansRegistration } from \"../../contracts/GuardiansRegistration\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport {\n  EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE,\n  REWARDS_FREQUENCY_KEY,\n} from \"./GuardiansV2ServiceConstants\";\nimport { ipv4ToHex } from \"../../utils/utils\";\n\n// TODO : O.L : Fill it up after deploying,\nconst MAIN_NET_GUARDIANS_REGISTRATION_ADDRESS =\n  \"0xd095e7310616376BDeD74Afc7e0400E6d0894E6F\";\n\nconst EMPTY_CONTACT_DETAILS = \" \";\n\nexport class GuardiansV2Service implements IGuardiansV2Service {\n  private guardiansRegistrationContract: GuardiansRegistration;\n\n  constructor(\n    private web3: Web3,\n    guardiansRegistrationAddress: string = MAIN_NET_GUARDIANS_REGISTRATION_ADDRESS\n  ) {\n    console.log({ guardiansRegistrationAddress });\n    this.guardiansRegistrationContract = (new this.web3.eth.Contract(\n      GuardiansRegistrationContractJson.abi as AbiItem[],\n      guardiansRegistrationAddress\n    ) as any) as GuardiansRegistration;\n  }\n\n  setFromAccount(address: string): void {\n    this.guardiansRegistrationContract.options.from = address;\n  }\n\n  public async isRegisteredGuardian(address: string): Promise<boolean> {\n    return this.guardiansRegistrationContract.methods\n      .isRegistered(address)\n      .call();\n  }\n\n  public async readGuardianInfo(\n    address: string\n  ): Promise<TGuardianInfoResponse> {\n    const rawResponse = await this.guardiansRegistrationContract.methods\n      .getGuardianData(address)\n      .call();\n\n    const {\n      registration_time,\n      orbsAddr,\n      name,\n      last_update_time,\n      ip,\n      contact,\n      website,\n    } = rawResponse;\n\n    const guardianInfoResponse: TGuardianInfoResponse = {\n      // contact,\n      ip,\n      lastUpdateTime: parseInt(last_update_time),\n      name,\n      orbsAddr,\n      registrationTime: parseInt(registration_time),\n      website,\n    };\n\n    return guardianInfoResponse;\n  }\n\n  public async readGuardianDistributionFrequencyInSeconds(\n    address: string\n  ): Promise<number> {\n    const rewardsFrequency = await this.guardiansRegistrationContract.methods\n      .getMetadata(address, REWARDS_FREQUENCY_KEY)\n      .call();\n\n    if (!rewardsFrequency || !rewardsFrequency.length) {\n      return EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE;\n    }\n\n    return parseInt(rewardsFrequency);\n  }\n\n  public setGuardianDistributionFrequency(\n    frequencyInSeconds: number\n  ): PromiEvent<TransactionReceipt> {\n    return this.guardiansRegistrationContract.methods\n      .setMetadata(REWARDS_FREQUENCY_KEY, frequencyInSeconds.toString())\n      .send();\n  }\n\n  public registerGuardian(\n    guardianRegistrationPayload: TGuardianRegistrationPayload\n  ): PromiEvent<TransactionReceipt> {\n    const {\n      website,\n      name,\n      orbsAddr,\n      ip,\n      // contact,\n    } = guardianRegistrationPayload;\n\n    const ipAsHex = ipv4ToHex(ip);\n\n    return this.guardiansRegistrationContract.methods\n      .registerGuardian(ipAsHex, orbsAddr, name, website, EMPTY_CONTACT_DETAILS)\n      .send();\n  }\n\n  public updateGuardianInfo(\n    guardianUpdatePayload: TGuardianUpdatePayload\n  ): PromiEvent<TransactionReceipt> {\n    const { ip, name, orbsAddr, website } = guardianUpdatePayload;\n    const ipAsHex = ipv4ToHex(ip);\n\n    return this.guardiansRegistrationContract.methods\n      .updateGuardian(ipAsHex, orbsAddr, name, website, EMPTY_CONTACT_DETAILS)\n      .send();\n  }\n}\n","import { blue } from \"@material-ui/core/colors\";\nimport responsiveFontSizes from \"@material-ui/core/styles/responsiveFontSizes\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\n\nconst COLOR1 = \"#0D0D0D\"; // dark gray\nconst COLOR2 = \"#6ec6d8\"; // bluish\nconst COLOR3 = \"#03FCF5\"; // bright bluish- Tetra\n\n// const PRIMARY_TEXT = '#dbdbdb';\nconst PRIMARY_TEXT = \"#dbdbdb\";\nconst SECONDARY_TEXT = \"#7B7B7B\";\n\nexport const baseTheme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      // TODO : Adjust all styles after structure is done\n      type: \"dark\",\n      primary: {\n        main: \"rgba(16, 34, 91, 0.7)\",\n      },\n      secondary: {\n        main: \"#7ccbf4\",\n      },\n      text: {\n        // primary: PRIMARY_TEXT,\n        // secondary: SECONDARY_TEXT,\n      },\n      background: {\n        // DEV_NOTE : This sets the app background color\n        default: \"#16317d\",\n        // paper: \"rgba(0, 31, 107, 0.6)\",\n      },\n    },\n    typography: {\n      // fontFamily: 'Montserrat',\n    },\n    overrides: {\n      MuiPaper: {\n        root: {\n          // backgroundColor: COLOR1,\n        },\n      },\n      MuiTypography: {\n        colorPrimary: {\n          // color: PRIMARY_TEXT,\n        },\n      },\n      MuiLink: {\n        root: {\n          // color: blue[500],\n        },\n      },\n    },\n  })\n);\n\nexport const AppStyles = {};\n","import { configure } from \"mobx\";\nimport { IStores } from \"./stores\";\nimport {\n  IOrbsPOSDataService,\n  IStakingService,\n  IOrbsTokenService,\n  IGuardiansService,\n  IOrbsRewardsService,\n} from \"orbs-pos-data\";\n\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { OrbsAccountStore } from \"./OrbsAccountStore\";\nimport { IGuardiansV2Service } from \"../services/guardiansV2Service/IGuardiansV2Service\";\n\n// This import ensures mobx batching\nimport \"mobx-react-lite/batchingForReactDom\";\n\n/**\n * Configures the mobx library. Should get called at App's initialization.\n */\nexport function configureMobx() {\n  configure({\n    enforceActions: \"observed\",\n  });\n}\n\n/**\n * Builds and initializes all of the stores\n */\nexport function getStores(\n  cryptoWalletConnectionService: ICryptoWalletConnectionService,\n  guardiansV2Service: IGuardiansV2Service\n): IStores {\n  // Create stores instances + Hydrate the stores\n  const cryptoWalletIntegrationStore = new CryptoWalletConnectionStore(\n    cryptoWalletConnectionService\n  );\n  const orbsAccountStore = new OrbsAccountStore(\n    cryptoWalletIntegrationStore,\n    guardiansV2Service,\n    cryptoWalletConnectionService\n  );\n\n  const stores: IStores = {\n    cryptoWalletIntegrationStore,\n    orbsAccountStore,\n  };\n\n  return stores;\n}\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"mobx-react\";\nimport App from \"./App\";\nimport { configureMobx, getStores } from \"./store/storesInitialization\";\nimport { buildServices } from \"./services/Services\";\nimport { StylesProvider, ThemeProvider } from \"@material-ui/core/styles\";\nimport { AppStyles, baseTheme } from \"./theme/Theme\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\n\ninterface IProps {\n  appComponent: React.ReactNode;\n}\n\nconfigureMobx();\n\nconst ethereumProvider = (window as any).ethereum;\nconst services = buildServices(ethereumProvider);\nconst stores = getStores(\n  services.cryptoWalletIntegrationService,\n  services.guardiansV2Service\n);\n\nexport const AppWrapper = React.memo<IProps>((props) => {\n  console.log(\"Wrapper render\");\n  const { appComponent } = props;\n  return (\n    <Router>\n      <Provider {...stores} {...services}>\n        <StylesProvider injectFirst>\n          <ThemeProvider theme={baseTheme}>\n            <SnackbarProvider maxSnack={3}>{appComponent}</SnackbarProvider>\n          </ThemeProvider>\n        </StylesProvider>\n      </Provider>\n    </Router>\n  );\n});\n","import { IEthereumProvider } from \"./cryptoWalletConnectionService/IEthereumProvider\";\nimport { CryptoWalletConnectionService } from \"./cryptoWalletConnectionService/CryptoWalletConnectionService\";\nimport { ICryptoWalletConnectionService } from \"./cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport {\n  GuardiansService,\n  IGuardiansService,\n  IOrbsClientService,\n  OrbsClientService,\n} from \"orbs-pos-data\";\nimport Web3 from \"web3\";\nimport configs from \"../configs\";\nimport { BuildOrbsClient } from \"./OrbsClientFactory\";\nimport { IGuardiansV2Service } from \"./guardiansV2Service/IGuardiansV2Service\";\nimport { GuardiansV2Service } from \"./guardiansV2Service/GuardiansV2Service\";\n\nexport interface IServices {\n  cryptoWalletIntegrationService: ICryptoWalletConnectionService;\n  guardiansV2Service: IGuardiansV2Service;\n  guardiansService: IGuardiansService;\n}\n\n// DEV_NOTE : For simplicity of early stage dev, we assume that we have ethereum provider, if not, we will not initialize the services.\nexport function buildServices(ethereumProvider: IEthereumProvider): IServices {\n  let web3: Web3;\n\n  const orbsClient = BuildOrbsClient();\n  const orbsClientService: IOrbsClientService = new OrbsClientService(\n    orbsClient\n  );\n\n  if (ethereumProvider) {\n    web3 = new Web3(ethereumProvider as any);\n  } else {\n    web3 = new Web3(\n      new Web3.providers.WebsocketProvider(configs.ETHEREUM_PROVIDER_WS)\n    );\n  }\n\n  return {\n    cryptoWalletIntegrationService: new CryptoWalletConnectionService(\n      ethereumProvider\n    ),\n    guardiansV2Service: new GuardiansV2Service(\n      web3,\n      configs.v2contractsAddressesOverride.guardiansRegistration\n    ),\n    guardiansService: new GuardiansService(web3, orbsClientService),\n  };\n}\n","import React, { DetailedHTMLProps } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface IProps {\n  text: string;\n  href?: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  link: {\n    color: theme.palette.secondary.light,\n    \"&:hover\": {\n      color: theme.palette.secondary.main,\n    },\n  },\n}));\n\nexport const InTextLink = React.memo<\n  IProps &\n    DetailedHTMLProps<\n      React.AnchorHTMLAttributes<HTMLAnchorElement>,\n      HTMLAnchorElement\n    >\n>((props) => {\n  const classes = useStyles();\n  const { text, href, ...others } = props;\n  return (\n    <a\n      className={classes.link}\n      href={href || \"\"}\n      target={\"_blank\"}\n      rel={\"noopener noreferrer\"}\n      // style={{ display: \"inline\" }}\n      {...others}\n    >\n      {text}\n    </a>\n  );\n});\n","import React from \"react\";\nimport {\n  Button,\n  FormControl,\n  FormControlLabel,\n  Typography,\n  useTheme,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useBoolean } from \"react-hanger\";\nimport { renderToString } from \"react-dom/server\";\nimport { InTextLink } from \"../components/InTextLink\";\nimport configs from \"../configs\";\n\ntype TWalletConnectionPhase = \"install\" | \"connect\";\n\ninterface IProps {\n  walletConnectionPhase: TWalletConnectionPhase;\n  actionFunction: () => void;\n  pressedOnInstall?: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  noEthereumProviderSection: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    // justifyContent: \"space-between\",\n    padding: \"2em\",\n    backgroundColor: \"rgba(0,0,0, 0.2)\",\n    borderRadius: \"5%\",\n    // width: \"clamp(20%, 40em, 100%)\",\n    width: \"fit-content\",\n    maxWidth: \"90%\",\n    boxSizing: \"border-box\",\n    // height: \"clamp(max(25%, 200px), 8em, 50%)\",\n  },\n}));\n\nexport const NoEthereumProviderSection = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { walletConnectionPhase, actionFunction, pressedOnInstall } = props;\n\n  const tickerValue = useBoolean(false);\n\n  const shouldDisplayLegalTicker = walletConnectionPhase === \"connect\";\n  const buttonIsEnabled = !shouldDisplayLegalTicker || tickerValue.value;\n\n  const isInstall = walletConnectionPhase === \"install\";\n\n  const titleText = isInstall\n    ? \"No Ethereum provider detected\"\n    : \"Please connect\";\n  const subTitleText = isInstall\n    ? \"you should install MetaMask and refresh the page\"\n    : \"To begin, connect your wallet\";\n  const buttonText =\n    walletConnectionPhase === \"install\" ? \"Install\" : \"Connect\";\n\n  const innerHtmlForLegalAgreement = renderToString(\n    <Typography>\n      I agree to the{\" \"}\n      <InTextLink href={configs.termsOfUseUrl} text={\"Terms of Use\"} /> and{\" \"}\n      <InTextLink href={configs.privacyPolicyUrl} text={\"Privacy Policy\"} />\n    </Typography>\n  );\n\n  return (\n    <div className={classes.noEthereumProviderSection}>\n      <Typography style={{ marginBottom: \"0.5rem\" }} variant={\"h4\"}>\n        {titleText}\n      </Typography>\n      <Typography style={{ marginBottom: \"1rem\" }}>{subTitleText}</Typography>\n      <Button\n        variant={\"outlined\"}\n        onClick={actionFunction}\n        disabled={!buttonIsEnabled}\n      >\n        {buttonText}\n      </Button>\n      {shouldDisplayLegalTicker && (\n        <FormControlLabel\n          style={{\n            marginTop: \"0.5rem\",\n          }}\n          control={\n            <Checkbox\n              checked={tickerValue.value}\n              onChange={(e) => tickerValue.setValue(e.target.checked)}\n              name={\"legalTicker\"}\n            />\n          }\n          label={\n            <Typography\n              // onClick={(e) => e.preventDefault()}\n              dangerouslySetInnerHTML={{ __html: innerHtmlForLegalAgreement }}\n            />\n          }\n        />\n      )}\n    </div>\n  );\n});\n","import React from \"react\";\nimport { Container, ContainerProps, useMediaQuery } from \"@material-ui/core\";\nimport useTheme from \"@material-ui/core/styles/useTheme\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  centeredContainer: {\n    // marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    height: \"100%\",\n  },\n}));\n\nexport const ContentContainer = React.memo<ContainerProps>((props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const smallOrSmaller = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  return (\n    <Container\n      className={classes.centeredContainer}\n      component={\"main\"}\n      disableGutters={smallOrSmaller}\n      {...props}\n    />\n  );\n});\n","/**\n * Copyright 2019 the prism authors\n * This file is part of the prism library in the Orbs project.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n * The above notice should be included in all copies or substantial portions of the software.\n */\n\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core/styles\";\nimport * as React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      height: \"100%\",\n      zIndex: -1000,\n      position: `absolute`,\n      overflow: \"hidden\",\n    },\n    appVersion: {\n      position: `fixed`,\n      bottom: 4,\n      left: 4,\n    },\n    triangle: {\n      opacity: 0.25,\n      fill: \"#08e4f4\",\n    },\n    svgElm: {\n      top: -320,\n      left: -80,\n      position: \"relative\",\n      height: 1500,\n      opacity: 0.1,\n      transform: `rotate(15deg)`,\n      animation: \"rotate 500s linear infinite\",\n    },\n    \"@keyframes rotate\": {\n      \"0%\": {\n        transform: \"rotate(15deg)\",\n      },\n      \"100%\": {\n        transform: \"rotate(375deg)\",\n      },\n    },\n  });\n\ninterface IProps extends WithStyles<typeof styles> {}\n\nexport const Background = withStyles(styles)(\n  class extends React.Component<IProps> {\n    public render() {\n      const { classes } = this.props;\n      return (\n        <div id={\"appBackground\"} className={classes.root}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className={classes.svgElm}\n            viewBox=\"0 0 100 100\"\n          >\n            <path\n              className={classes.triangle}\n              d=\"m8.44388,72.186002l59.79,0a5.46,5.46 0 0 0 4.58,-8.41l-29.85,-46.28a5.45,5.45 0 0 0 -9.16,0l-29.93,46.28a5.45,5.45 0 0 0 4.57,8.41z\"\n            />\n            <path\n              className={classes.triangle}\n              d=\"m20.93,78.176003l58.6,0a6.09,6.09 0 0 0 5.12,-9.4l-29.2,-45.28a5.45,5.45 0 0 0 -9.16,0l-29.93,46.27a5.45,5.45 0 0 0 4.57,8.41z\"\n            />\n            <path\n              className={classes.triangle}\n              d=\"m32.443882,84.176l58.6,0a6.09,6.09 0 0 0 5.12,-9.4l-29.2,-45.28a5.45,5.45 0 0 0 -9.16,0l-29.93,46.27a5.45,5.45 0 0 0 4.57,8.41z\"\n            />\n          </svg>\n          {/*<Typography className={classes.appVersion} variant=\"caption\">*/}\n          {/*  {prismVersion}*/}\n          {/*</Typography>*/}\n        </div>\n      );\n    }\n  }\n);\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n    textAlign: \"center\",\n    marginTop: \"1em\",\n    marginBottom: \"1em\",\n  },\n}));\n\nexport const Header = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  return (\n    <AppBar position={\"absolute\"}>\n      <Toolbar>\n        <div className={classes.title}>\n          <Typography variant=\"h5\">ORBS Guardians Portal</Typography>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Toolbar } from \"@material-ui/core\";\nimport { Footer } from \"./Footer\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  page: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    // border: \"1px solid black\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    boxSizing: \"border-box\",\n    padding: \"2em\",\n    height: \"100%\",\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n}));\n\nexport const Page = React.memo<IProps>((props) => {\n  const { children } = props;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.page}>\n      {/* DEV_NOTE : Adding 'toolbar' to keep with the tile */}\n      <Toolbar />\n      {children}\n    </div>\n  );\n});\n","import React, { useCallback } from \"react\";\nimport { CssBaseline, useTheme } from \"@material-ui/core\";\nimport { NoEthereumProviderSection } from \"./NoEthereumProviderSection\";\nimport { useBoolean } from \"react-hanger\";\nimport { ContentContainer } from \"../components/structure/ContentContainer\";\nimport { Background } from \"../components/structure/Background\";\nimport { Header } from \"../components/structure/Header\";\nimport { Page } from \"../components/structure/Page\";\n\ntype TWalletConnectionPhase = \"install\" | \"connect\";\n\ninterface IProps {}\n\nexport const NoEthereumProviderPage = React.memo<IProps>((props) => {\n  const hasPressed = useBoolean(false);\n\n  const installMetaMask = useCallback(() => {\n    window.open(\"https://metamask.io/\", \"_blank\");\n    hasPressed.setTrue();\n  }, [hasPressed]);\n\n  return (\n    <>\n      <Header />\n      <main className=\"App\" style={{ height: \"100%\" }}>\n        <Background />\n        <ContentContainer id={\"appContainer\"}>\n          <Page>\n            <NoEthereumProviderSection\n              walletConnectionPhase={\"install\"}\n              actionFunction={installMetaMask}\n            />\n          </Page>\n        </ContentContainer>\n        <CssBaseline />\n      </main>\n    </>\n  );\n});\n","import React from \"react\";\nimport { MobXProviderContext } from \"mobx-react\";\nimport { IStores } from \"./stores\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { OrbsAccountStore } from \"./OrbsAccountStore\";\n\nexport function useStores(): IStores {\n  // @ts-ignore\n  return React.useContext(MobXProviderContext);\n}\n\nexport function useCryptoWalletIntegrationStore(): CryptoWalletConnectionStore {\n  return useStores().cryptoWalletIntegrationStore;\n}\n\nexport function useOrbsAccountStore(): OrbsAccountStore {\n  return useStores().orbsAccountStore;\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport { useStateful } from \"react-hanger\";\nimport { TGuardianRegistrationPayload } from \"../../../services/guardiansV2Service/IGuardiansV2Service\";\nimport { Button, TextField, Typography } from \"@material-ui/core\";\nimport { TGuardianInfo } from \"../../../store/OrbsAccountStore\";\nimport { useForm } from \"react-hook-form\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface IProps {\n  actionButtonTitle: string;\n  guardianAddress: string;\n  guardianInitialInfo: TGuardianInfo;\n  submitInfo: (\n    guardianRegistrationPayload: TGuardianRegistrationPayload\n  ) => void;\n  disableSubmit?: boolean;\n  messageForDisabledSubmit?: string;\n}\n\nconst ETHEREUM_ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nconst IP_REGEX = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\n\nconst NODE_ADDRESS_MESSAGE = \"Must use a valid address\";\nconst IP_ADDRESS_MESSAGE = \"Must use a valid IPV4 address\";\nconst WEBSITE_MESSAGE = \"Must use a URL\";\n\nfunction validURL(str: string) {\n  const pattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n    \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\n    \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n    \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\n    \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  return !!pattern.test(str);\n}\n\ntype TFormData = {\n  // guardianAddress: string;\n  name: string;\n  website: string;\n  contactInfo: string;\n  ipAddress: string;\n  nodeAddress: string;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    \"& label.Mui-focused\": {\n      color: \"#f5f5f5\",\n    },\n  },\n}));\n\n/**\n * A single component to handle both \"Guardian registration\" and \"Guardian Update\"\n */\nexport const GuardiansDetailsForm = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    guardianAddress,\n    guardianInitialInfo,\n    submitInfo,\n    actionButtonTitle,\n    disableSubmit,\n    messageForDisabledSubmit,\n  } = props;\n\n  const { register, handleSubmit, errors } = useForm<TFormData>();\n\n  const name = useStateful(guardianInitialInfo.name);\n  const website = useStateful(guardianInitialInfo.website);\n  // const contactInfo = useStateful(guardianInitialInfo.contact);\n  const ipAddress = useStateful(guardianInitialInfo.ip);\n  const nodeAddress = useStateful(guardianInitialInfo.orbsAddr);\n\n  const errorNodeAddress = !!errors.nodeAddress;\n  const errorIPAddress = !!errors.ipAddress;\n  const errorWebsite = !!errors.website;\n\n  // DEV_NOTE : Taking ref for eslint-hooks\n  const nameSetValue = name.setValue;\n  const websiteSetValue = website.setValue;\n  // const contactInfoSetValue = contactInfo.setValue;\n  const ipAddressSetValue = ipAddress.setValue;\n  const nodeAddressSetValue = nodeAddress.setValue;\n\n  // DEV_NOTE : O.L : This is a hack to enforce update after registration,\n  // TODO : O.L : Fix this\n  useEffect(() => {\n    if (guardianInitialInfo) {\n      console.log(\"Re-setting data\");\n      nameSetValue(guardianInitialInfo.name);\n      websiteSetValue(guardianInitialInfo.website);\n      // contactInfoSetValue(guardianInitialInfo.contact);\n      ipAddressSetValue(guardianInitialInfo.ip);\n      nodeAddressSetValue(guardianInitialInfo.orbsAddr);\n    }\n  }, [\n    // contactInfoSetValue,\n    guardianInitialInfo,\n    ipAddressSetValue,\n    nameSetValue,\n    nodeAddressSetValue,\n    websiteSetValue,\n  ]);\n\n  // TODO : O.L : Add tx progress indicator\n  const submit = useCallback(\n    (formData: TFormData) => {\n      const guardianRegistrationPayload: TGuardianRegistrationPayload = {\n        ip: formData.ipAddress,\n        orbsAddr: formData.nodeAddress,\n        name: formData.name,\n        website: formData.website,\n        // contact: formData.contactInfo,\n      };\n      submitInfo(guardianRegistrationPayload);\n    },\n    [submitInfo]\n  );\n\n  // TODO : FUTURE : This forms will not look good on mobile, fix the text overflow\n  return (\n    <form\n      onSubmit={handleSubmit((formData) => submit(formData))}\n      style={{\n        maxWidth: \"100%\",\n        width: \"100%\",\n      }}\n    >\n      <TextField\n        name={\"name\"}\n        label={\"Guardian name\"}\n        value={name.value}\n        onChange={(e) => name.setValue(e.target.value)}\n        required\n        inputRef={register}\n        fullWidth\n        className={classes.textField}\n      />\n      <br />\n      <TextField\n        fullWidth\n        name={\"website\"}\n        label={\"Guardian website\"}\n        title={\n          \"A valid website URL is required. The Guardian website is used by delegators when selecting a Guardian.\\n\"\n        }\n        value={website.value}\n        onChange={(e) => website.setValue(e.target.value)}\n        required\n        error={errorWebsite}\n        helperText={errorWebsite && WEBSITE_MESSAGE}\n        inputRef={register({ validate: validURL })}\n        className={classes.textField}\n      />\n      {/*<br />*/}\n      {/*<TextField*/}\n      {/*  fullWidth*/}\n      {/*  name={\"contactInfo\"}*/}\n      {/*  title={\"contactInfo\"}*/}\n      {/*  label={\"Contact Info\"}*/}\n      {/*  value={contactInfo.value}*/}\n      {/*  onChange={(e) => contactInfo.setValue(e.target.value)}*/}\n      {/*  required*/}\n      {/*  inputRef={register}*/}\n      {/*/>*/}\n      <br />\n      <TextField\n        fullWidth\n        name={\"ipAddress\"}\n        label={\"Node IP\"}\n        title={\n          \"A valid IPv4 address is required to allow the Guardian’s node to connect to the network gossip topology.\"\n        }\n        value={ipAddress.value}\n        onChange={(e) => ipAddress.setValue(e.target.value)}\n        required\n        inputRef={register({ pattern: IP_REGEX })}\n        error={errorIPAddress}\n        helperText={errorIPAddress && IP_ADDRESS_MESSAGE}\n        className={classes.textField}\n      />\n\n      <br />\n      <TextField\n        name={\"nodeAddress\"}\n        label={\"Node address\"}\n        title={\n          \"The node address is used for signing blocks on Orbs and sending automated \\n node notification transactions such as ready or auto voteout.\"\n        }\n        value={nodeAddress.value}\n        onChange={(e) => nodeAddress.setValue(e.target.value)}\n        error={errorNodeAddress}\n        helperText={errorNodeAddress && NODE_ADDRESS_MESSAGE}\n        required\n        inputRef={register({ pattern: ETHEREUM_ADDRESS_REGEX })}\n        fullWidth\n        className={classes.textField}\n      />\n      <br />\n      <br />\n      <Button\n        variant={\"outlined\"}\n        fullWidth\n        type={\"submit\"}\n        disabled={disableSubmit}\n      >\n        {actionButtonTitle}\n      </Button>\n      {messageForDisabledSubmit && (\n        <Typography variant={\"body2\"} color={\"error\"}>\n          {messageForDisabledSubmit}\n        </Typography>\n      )}\n    </form>\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AppWrapper } from \"./AppWrapper\";\nimport { NoEthereumProviderPage } from \"./pages/NoEthereumProviderPage\";\nimport App from \"./App\";\nimport { ComingSoonPage } from \"./pages/ComingSoonPage\";\n\nconst hasEthereumProvider = !!(window as any).ethereum;\n\nlet AppComponent;\n\nif (hasEthereumProvider) {\n  AppComponent = <App />;\n} else {\n  AppComponent = <NoEthereumProviderPage />;\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper appComponent={AppComponent} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useMemo } from \"react\";\nimport { fromUnixTime } from \"date-fns\";\nimport {\n  TGuardianInfo,\n  TGuardianContractInteractionTimes,\n} from \"../../store/OrbsAccountStore\";\nimport { GuardiansDetailsForm } from \"./forms/GuradiansDetailsForm\";\nimport { TGuardianUpdatePayload } from \"../../services/guardiansV2Service/IGuardiansV2Service\";\nimport {\n  Paper,\n  Typography,\n  Avatar,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { Transition } from \"react-spring/renderprops-universal\";\nimport { GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS } from \"../../services/guardiansV2Service/GuardiansV2ServiceConstants\";\n\ninterface IProps {\n  guardianAddress: string;\n  // Props for Guardian info\n  guardianInfo: TGuardianInfo;\n  updateGuardianDetails: (\n    guardianRegistrationPayload: TGuardianUpdatePayload\n  ) => void;\n  guardianContractInteractionTimes: TGuardianContractInteractionTimes;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n}));\n\nexport const EditGuardianInfoSection = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    guardianInfo,\n    guardianAddress,\n    updateGuardianDetails,\n    guardianContractInteractionTimes,\n  } = props;\n\n  const { lastUpdateTime, registrationTime } = guardianContractInteractionTimes;\n\n  const registrationDate = useMemo(() => {\n    return fromUnixTime(registrationTime);\n  }, [registrationTime]);\n\n  const lastUpdateDate = useMemo(() => {\n    return fromUnixTime(lastUpdateTime);\n  }, [lastUpdateTime]);\n\n  return (\n    <>\n      <Avatar className={classes.avatar}>\n        <EditIcon />\n      </Avatar>\n      <div\n        style={{\n          textAlign: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignContent: \"center\",\n          overflow: \"hidden\",\n        }}\n      >\n        <Typography variant={\"h5\"}>Guardian details update</Typography>\n        <Typography\n          style={{\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden\",\n          }}\n        >\n          {guardianAddress}\n        </Typography>\n      </div>\n      <GuardiansDetailsForm\n        guardianAddress={guardianAddress}\n        submitInfo={updateGuardianDetails}\n        guardianInitialInfo={guardianInfo}\n        actionButtonTitle={\"Update\"}\n      />\n      <br />\n      {/*<Typography variant={\"h6\"}>*/}\n      {/*  Guardian registered: {registrationDate.toLocaleString()}*/}\n      {/*</Typography>*/}\n      <Transition\n        items={lastUpdateDate}\n        // config={config.gentle}\n        // immediate={DISABLE_ANIMATIONS}\n\n        from={{\n          // position: \"absolute\",\n          opacity: 0,\n          // transform: \"translateX(1%)\",\n        }}\n        enter={{\n          opacity: 1,\n          // transform: \"translateX(0%)\",\n        }}\n        leave={{\n          opacity: 0,\n          // transform: \"translateX(1%)\",\n          // position: \"absolute\",\n          display: \"none\",\n        }}\n        update={{\n          opacity: 1,\n        }}\n      >\n        {(toggle) => (props) => (\n          <Typography variant={\"h6\"} style={props}>\n            Details Last updated: {lastUpdateDate.toLocaleString()}\n          </Typography>\n        )}\n      </Transition>\n      <br />\n    </>\n  );\n});\n","import React, { useMemo } from \"react\";\nimport { TGuardianRegistrationPayload } from \"../../services/guardiansV2Service/IGuardiansV2Service\";\nimport { GuardiansDetailsForm } from \"./forms/GuradiansDetailsForm\";\nimport { TGuardianInfo } from \"../../store/OrbsAccountStore\";\nimport { Avatar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PersonIcon from \"@material-ui/icons/Person\";\n\ninterface IProps {\n  guardianAddress: string;\n  registerGuardian: (\n    guardianRegistrationPayload: TGuardianRegistrationPayload\n  ) => void;\n  // DEV_NOTE : This prop might be better placed elsewhere, for now it works\n  ethereumBalance: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n}));\n\nconst demoInitialInfo: TGuardianInfo = {\n  orbsAddr: \"0xe30a30069209aa4e7e7b07ab391966a0f071afd9\",\n  ip: \"12.114.252.82\",\n  // contact: \"A's contact info\",\n  website: \"a.com\",\n  name: \"A\",\n};\nconst emptyInitialInfo: TGuardianInfo = {\n  orbsAddr: \"\",\n  ip: \"\",\n  // contact: \"\",\n  website: \"\",\n  name: \"\",\n};\n\nconst MINIMAL_REQUIRED_ETH_BALANCE = 1;\n\nexport const RegisterGuardianSection = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { guardianAddress, registerGuardian, ethereumBalance } = props;\n\n  const { shouldDisable, messageToExplainDisable } = useMemo(() => {\n    let shouldDisable: boolean = false;\n    let messageToExplainDisable: string | undefined = undefined;\n\n    if (ethereumBalance < MINIMAL_REQUIRED_ETH_BALANCE) {\n      shouldDisable = true;\n      messageToExplainDisable =\n        \"A minimal balance of 1 Ether is required in order to register as a guardian\";\n    }\n\n    return {\n      shouldDisable,\n      messageToExplainDisable,\n    };\n  }, [ethereumBalance]);\n\n  return (\n    <>\n      <Avatar className={classes.avatar}>\n        <PersonIcon />\n      </Avatar>\n      <div\n        style={{\n          maxWidth: \"100%\",\n          textAlign: \"center\",\n          overflow: \"hidden\",\n        }}\n      >\n        <Typography variant={\"h5\"}>Guardian Registration</Typography>\n        <Typography\n          style={{\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden\",\n          }}\n        >\n          {guardianAddress}\n        </Typography>\n      </div>\n      <GuardiansDetailsForm\n        guardianAddress={guardianAddress}\n        submitInfo={registerGuardian}\n        guardianInitialInfo={emptyInitialInfo}\n        actionButtonTitle={\"Register\"}\n        disableSubmit={shouldDisable}\n        messageForDisabledSubmit={messageToExplainDisable}\n      />\n    </>\n  );\n});\n","import React, { useCallback, useEffect } from \"react\";\nimport { Button, TextField, Typography } from \"@material-ui/core\";\nimport { useBoolean, useNumber } from \"react-hanger\";\nimport { GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS } from \"../../../services/guardiansV2Service/GuardiansV2ServiceConstants\";\nimport { useForm } from \"react-hook-form\";\nimport { config, Transition } from \"react-spring/renderprops-universal\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface IProps {\n  currentFrequencyInHours: number;\n  updateRewardsFrequency: (frequencyInHours: number) => void;\n  isUsingDefaultValue?: boolean;\n}\n\ntype TFormData = {\n  rewardsFrequencyInHours: number;\n};\n\nconst REWARDS_FREQUENCY_MESSAGE = \"Minimum frequency is 12 hours\";\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    \"& label.Mui-focused\": {\n      color: \"#f5f5f5\",\n    },\n  },\n}));\n\nexport const RewardsDistributionFrequencyForm = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    currentFrequencyInHours,\n    updateRewardsFrequency,\n    isUsingDefaultValue,\n  } = props;\n\n  // DEV_NOTE : is the value is already not the default one, we will not hide the input element\n  const userWantsToChangeDefault = useBoolean(false);\n\n  const frequency = useNumber(\n    Math.max(\n      currentFrequencyInHours,\n      GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS\n    ),\n    {\n      lowerLimit: GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS,\n    }\n  );\n\n  // useEffect(() => {\n  //   if (!isUsingDefaultValue) {\n  //     userWantsToChangeDefault.setTrue();\n  //   }\n  // }, [isUsingDefaultValue, userWantsToChangeDefault]);\n\n  const setFreq = frequency.setValue;\n  useEffect(() => {\n    setFreq(\n      Math.max(\n        currentFrequencyInHours,\n        GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS\n      )\n    );\n  }, [currentFrequencyInHours, setFreq]);\n\n  const { register, handleSubmit, errors } = useForm<TFormData>();\n\n  const errorRewardsFrequency = !!errors.rewardsFrequencyInHours;\n\n  const submitUpdate = useCallback(\n    (formData: TFormData) => {\n      updateRewardsFrequency(formData.rewardsFrequencyInHours);\n    },\n    [updateRewardsFrequency]\n  );\n\n  // TODO : O.L : Get a better text building code.\n  const freqFullDays = Math.floor(currentFrequencyInHours / 24);\n  const freqRemainingHours = Math.floor(currentFrequencyInHours % 24);\n  const daysText =\n    freqFullDays === 0\n      ? \"\"\n      : freqFullDays === 1\n      ? `1 day and`\n      : `${freqFullDays} days`;\n  const hoursText =\n    freqRemainingHours === 0\n      ? \"\"\n      : freqRemainingHours === 1\n      ? \"1 hour\"\n      : `${freqRemainingHours} hours`;\n  const middleText = daysText !== \"\" && hoursText !== \"\" ? \" and \" : \"\";\n  const commentText =\n    daysText !== \"\" ? ` (${currentFrequencyInHours} hours)` : \"\";\n  const currentFreqInHumanText = `${daysText}${middleText}${hoursText}${commentText}`;\n\n  const currentlyUsingText = isUsingDefaultValue\n    ? \"Currently using default value\"\n    : `Current distribution frequency is once every ${currentFreqInHumanText}`;\n\n  return (\n    <form\n      style={{\n        maxWidth: \"100%\",\n        width: \"100%\",\n      }}\n      onSubmit={handleSubmit(submitUpdate)}\n    >\n      {/*<Typography variant={\"body1\"}>{currentlyUsingText}</Typography>*/}\n      <Typography variant={\"body1\"} style={{ display: \"inline\" }}>\n        Current distribution frequency is once every{\" \"}\n      </Typography>\n      <Typography\n        variant={\"body1\"}\n        style={{ display: \"inline\", fontWeight: \"bold\" }}\n      >\n        {currentFreqInHumanText}\n      </Typography>\n      {/*<Typography variant={\"body2\"}>*/}\n      {/*  Default value is 14 days (336 hours)*/}\n      {/*</Typography>*/}\n\n      <br />\n\n      <Transition\n        items={userWantsToChangeDefault.value}\n        // config={config.gentle}\n        initial={null}\n        // immediate={DISABLE_ANIMATIONS}\n\n        from={{\n          // position: \"absolute\",\n          opacity: 0,\n          // transform: \"translateX(1%)\",\n        }}\n        enter={{\n          opacity: 1,\n          // transform: \"translateX(0%)\",\n        }}\n        leave={{\n          opacity: 0,\n          // transform: \"translateX(1%)\",\n          // position: \"absolute\",\n          display: \"none\",\n        }}\n      >\n        {(toggle) =>\n          toggle\n            ? (props) => (\n                <div style={{ ...props, maxWidth: \"100%\", width: \"100%\" }}>\n                  <TextField\n                    fullWidth\n                    name={\"rewardsFrequencyInHours\"}\n                    title={`Rewards Frequency in hours - Minimum ${GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS} hours`}\n                    label={\"Rewards Frequency in hours\"}\n                    value={frequency.value}\n                    onChange={(e) =>\n                      frequency.setValue(parseInt(e.target.value) || 0)\n                    }\n                    required\n                    type={\"number\"}\n                    inputRef={register({\n                      min: GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS,\n                    })}\n                    error={errorRewardsFrequency}\n                    helperText={\n                      errorRewardsFrequency\n                        ? REWARDS_FREQUENCY_MESSAGE\n                        : \"Default frequency is 14 days (336 hours), cannot be lower than half a day (12 hours)\"\n                    }\n                    className={classes.textField}\n                  />\n                  <br />\n                  <br />\n                  <Button variant={\"outlined\"} type={\"submit\"} fullWidth>\n                    Update\n                  </Button>\n                </div>\n              )\n            : (props) => (\n                <Button\n                  onClick={userWantsToChangeDefault.setTrue}\n                  variant={\"outlined\"}\n                  fullWidth\n                  style={props}\n                >\n                  Set to other value\n                </Button>\n              )\n        }\n      </Transition>\n    </form>\n  );\n});\n","import React, { useMemo } from \"react\";\nimport { fromUnixTime } from \"date-fns\";\nimport {\n  TGuardianInfo,\n  TGuardianContractInteractionTimes,\n} from \"../../store/OrbsAccountStore\";\nimport { GuardiansDetailsForm } from \"./forms/GuradiansDetailsForm\";\nimport { TGuardianUpdatePayload } from \"../../services/guardiansV2Service/IGuardiansV2Service\";\nimport { Avatar, Paper, Typography } from \"@material-ui/core\";\nimport { RewardsDistributionFrequencyForm } from \"./forms/RewardsDistributionFrequencyForm\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TimelapseIcon from \"@material-ui/icons/Timelapse\";\n\ninterface IProps {\n  currentFrequencyInHours: number;\n  updateRewardsFrequency: (frequencyInHours: number) => void;\n  isUsingDefaultValue?: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n}));\n\nexport const EditRewardsDistributionSection = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    isUsingDefaultValue,\n    currentFrequencyInHours,\n    updateRewardsFrequency,\n  } = props;\n  return (\n    <>\n      <Avatar className={classes.avatar}>\n        <TimelapseIcon />\n      </Avatar>\n      <Typography variant={\"h5\"}>Rewards Distribution Frequency</Typography>\n      <RewardsDistributionFrequencyForm\n        currentFrequencyInHours={currentFrequencyInHours}\n        updateRewardsFrequency={updateRewardsFrequency}\n        isUsingDefaultValue={isUsingDefaultValue}\n      />\n    </>\n  );\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface IProps {}\nconst useStyles = makeStyles((theme) => ({\n  contentFitter: {\n    height: \"100%\",\n    width: \"fit-content\",\n    maxWidth: \"100%\",\n  },\n}));\n\nexport const ContentFitting = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { children } = props;\n  return <div className={classes.contentFitter}>{children}</div>;\n});\n","import React, { useCallback, useMemo } from \"react\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useOrbsAccountStore,\n} from \"../../store/storeHooks\";\nimport { EditGuardianInfoSection } from \"./EditGuardianInfoSection\";\nimport { RegisterGuardianSection } from \"./RegisterGuardianSection\";\nimport { RewardsDistributionFrequencyForm } from \"./forms/RewardsDistributionFrequencyForm\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Avatar,\n  Backdrop,\n  CircularProgress,\n  Divider,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { EditRewardsDistributionSection } from \"./EditRewardsDistributionSection\";\nimport { Page } from \"../../components/structure/Page\";\nimport { ContentFitting } from \"../../components/structure/ContentFitting\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport {\n  TGuardianRegistrationPayload,\n  TGuardianUpdatePayload,\n} from \"../../services/guardiansV2Service/IGuardiansV2Service\";\nimport { useSnackbar } from \"notistack\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n}));\n\nexport const GuardiansRegisterOrEditPage = observer<\n  React.FunctionComponent<IProps>\n>((props) => {\n  const classes = useStyles();\n\n  const { enqueueSnackbar } = useSnackbar();\n  const orbsAccountStore = useOrbsAccountStore();\n  const cryptoWalletIntegrationStore = useCryptoWalletIntegrationStore();\n\n  const title = orbsAccountStore.isGuardian\n    ? \"Guardian details update\"\n    : \"Guardian Registration\";\n  let content;\n\n  const updateGuardianDetails = useCallback(\n    async (guardianRegistrationPayload: TGuardianUpdatePayload) => {\n      try {\n        await orbsAccountStore.updateGuardianInfo(guardianRegistrationPayload);\n      } catch (e) {\n        enqueueSnackbar(`Error in 'Guardian Details Update' TX ${e.message}`, {\n          variant: \"error\",\n        });\n      }\n    },\n    [enqueueSnackbar, orbsAccountStore]\n  );\n\n  const updateRewardsFrequency = useCallback(\n    async (frequencyInHours: number) => {\n      try {\n        await orbsAccountStore.setGuardianDistributionFrequency(\n          frequencyInHours\n        );\n      } catch (e) {\n        enqueueSnackbar(`Error in 'Rewards Frequency Update' TX ${e.message}`, {\n          variant: \"error\",\n        });\n      }\n    },\n    [enqueueSnackbar, orbsAccountStore]\n  );\n\n  const registerGuardian = useCallback(\n    async (guardianRegistrationPayload: TGuardianRegistrationPayload) => {\n      try {\n        await orbsAccountStore.registerGuardian(guardianRegistrationPayload);\n      } catch (e) {\n        enqueueSnackbar(`Error in 'Guardian Registration' TX ${e.message}`, {\n          variant: \"error\",\n        });\n      }\n    },\n    [enqueueSnackbar, orbsAccountStore]\n  );\n\n  // TODO : ORL : Organize all of this loading \"ifs\"\n  if (orbsAccountStore.errorLoading) {\n    return (\n      <Page>\n        <ContentFitting>\n          <Typography>Error loading</Typography>\n        </ContentFitting>{\" \"}\n      </Page>\n    );\n  }\n\n  if (!orbsAccountStore.doneLoading) {\n    return (\n      <Page>\n        <ContentFitting>\n          <Typography>Loading...</Typography>\n        </ContentFitting>{\" \"}\n      </Page>\n    );\n  }\n\n  if (orbsAccountStore.isGuardian) {\n    content = (\n      <>\n        <EditGuardianInfoSection\n          guardianInfo={orbsAccountStore.guardianInfo}\n          guardianAddress={cryptoWalletIntegrationStore.mainAddress}\n          guardianContractInteractionTimes={\n            orbsAccountStore.guardianContractInteractionTimes\n          }\n          updateGuardianDetails={updateGuardianDetails}\n        />\n\n        <Divider style={{ width: \"100%\", height: \"3px\" }} />\n        <br />\n\n        <EditRewardsDistributionSection\n          currentFrequencyInHours={\n            orbsAccountStore.rewardDistributionFrequencyInHours\n          }\n          updateRewardsFrequency={updateRewardsFrequency}\n          isUsingDefaultValue={orbsAccountStore.isUsingDefaultRewardFrequency}\n        />\n      </>\n    );\n  } else {\n    content = (\n      <RegisterGuardianSection\n        registerGuardian={registerGuardian}\n        guardianAddress={cryptoWalletIntegrationStore.mainAddress}\n        ethereumBalance={orbsAccountStore.ethBalance}\n      />\n    );\n  }\n\n  return (\n    <Page>\n      <ContentFitting>\n        {/* Content  */}\n        <div\n          style={{\n            display: \"grid\",\n            textAlign: \"center\",\n            maxWidth: \"100%\",\n          }}\n        >\n          {content}\n        </div>\n        <Backdrop\n          className={classes.backdrop}\n          open={orbsAccountStore.txPending}\n        >\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n      </ContentFitting>\n    </Page>\n  );\n});\n","import React from \"react\";\nimport {\n  AppBar,\n  Button,\n  Slide,\n  Toolbar,\n  Typography,\n  useScrollTrigger,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { InTextLink } from \"../InTextLink\";\nimport configs from \"../../configs\";\n\ninterface IProps {\n  version?: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  bottomAppBar: {\n    // paddingTop: \"1em\",\n    // paddingBottom: \"1em\",\n    // borderTop: \"2px solid #363636\",\n    height: \"3em\",\n    bottom: 0,\n    top: \"auto\",\n\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    paddingRight: \"1em\",\n    paddingLeft: \"1em\",\n  },\n\n  appVersion: {\n    marginLeft: \"auto\",\n  },\n}));\n\nconst HideOnScroll = React.memo((props) => {\n  const { children } = props;\n\n  const trigger = useScrollTrigger();\n\n  console.log(trigger);\n\n  return (\n    <Slide appear={false} direction=\"up\" in={trigger}>\n      {children as any}\n    </Slide>\n  );\n});\n\n// DEV_NOTE : O.L : All of the centering (for the links) and margin (for the app version)\n//                  was done in a hacky manner, should fix it in the future.\nexport const Footer = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { version } = props;\n\n  return (\n    <>\n      {/* TODO : This 'Toolbar' is here to keep space between content and footer, should make a better solution */}\n      <Toolbar style={{}} />\n      {/*<HideOnScroll>*/}\n      <AppBar className={classes.bottomAppBar} position={\"fixed\"}>\n        {/*<Toolbar>*/}\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <div\n            style={{\n              marginRight: \"auto\",\n              marginLeft: \"auto\",\n              position: \"absolute\",\n            }}\n          >\n            <InTextLink\n              text={\"Term of use\"}\n              href={configs.termsOfUseUrl}\n              style={{ paddingInlineEnd: \"1em\", justifySelf: \"center\" }}\n            />\n            <InTextLink\n              href={configs.privacyPolicyUrl}\n              text={\"Privacy Policy\"}\n            />\n          </div>\n\n          <div className={classes.appVersion}>\n            <Typography variant={\"caption\"}>version {version}</Typography>\n          </div>\n        </div>\n      </AppBar>\n      {/*</HideOnScroll>*/}\n    </>\n  );\n});\n","import React, { useEffect, useMemo } from \"react\";\nimport { ContentContainer } from \"./components/structure/ContentContainer\";\nimport { Route, Switch } from \"react-router-dom\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useOrbsAccountStore,\n} from \"./store/storeHooks\";\nimport { observer } from \"mobx-react\";\nimport { NoEthereumProviderSection } from \"./pages/NoEthereumProviderSection\";\nimport { GuardiansRegisterOrEditPage } from \"./pages/GuardiandRegisterOrEdit/GuardianRegisterOrEditPage\";\nimport { Background } from \"./components/structure/Background\";\nimport { Header } from \"./components/structure/Header\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Page } from \"./components/structure/Page\";\nimport { useSnackbar } from \"notistack\";\nimport { Footer } from \"./components/structure/Footer\";\n\nconst useStyles = makeStyles(() => ({\n  app: {\n    // height: \"100%\",\n    flex: 1,\n  },\n}));\n\nconst App = observer(() => {\n  const classes = useStyles();\n  const cryptoWalletIntegrationStore = useCryptoWalletIntegrationStore();\n  const orbsAccountStore = useOrbsAccountStore();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const isConnected = cryptoWalletIntegrationStore.isConnectedToWallet;\n\n  const appContent = useMemo(() => {\n    if (!isConnected) {\n      return (\n        <Page>\n          <NoEthereumProviderSection\n            walletConnectionPhase={\"connect\"}\n            actionFunction={() => cryptoWalletIntegrationStore.askToConnect()}\n          />\n        </Page>\n      );\n    } else {\n      return (\n        <Switch>\n          <Route path={\"/\"}>\n            <GuardiansRegisterOrEditPage />\n          </Route>\n        </Switch>\n      );\n    }\n  }, [cryptoWalletIntegrationStore, isConnected]);\n\n  // Alert about TX error if happened\n  const txHadError = orbsAccountStore.txHadError;\n  useEffect(() => {\n    if (txHadError) {\n      enqueueSnackbar(\"Error in Transaction\", { variant: \"error\" });\n    }\n  }, [enqueueSnackbar, txHadError]);\n\n  // Alert about TX cancelation  if happened\n  const txCanceled = orbsAccountStore.txCanceled;\n  useEffect(() => {\n    if (txCanceled) {\n      enqueueSnackbar(\"Transaction canceled\", { variant: \"info\" });\n    }\n  }, [enqueueSnackbar, txCanceled]);\n\n  return (\n    <>\n      <Header />\n      <main className={classes.app}>\n        <Background />\n        <ContentContainer id={\"appContainer\"}>{appContent}</ContentContainer>\n        <CssBaseline />\n      </main>\n      <Footer version={\"0.1\"} />\n    </>\n  );\n});\n\nexport default App;\n"],"sourceRoot":""}