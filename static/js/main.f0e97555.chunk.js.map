{"version":3,"sources":["serviceWorker.ts","store/CryptoWalletConnectionStore.ts","utils/utils.ts","constants/ethereumErrorCodes.ts","store/OrbsAccountStore.ts","services/guardiansV2Service/GuardiansV2ServiceConstants.ts","services/cryptoWalletConnectionService/CryptoWalletConnectionService.ts","configs.ts","services/OrbsClientFactory.ts","services/guardiansV2Service/GuardiansV2Service.ts","theme/Theme.tsx","store/storesInitialization.ts","AppWrapper.tsx","services/Services.ts","components/InTextLink.tsx","pages/NoEthereumProviderSection.tsx","components/structure/ContentContainer.tsx","components/structure/Background.tsx","components/structure/Header.tsx","components/structure/Page.tsx","pages/NoEthereumProviderPage.tsx","store/storeHooks.ts","pages/GuardiandRegisterOrEdit/forms/GuradiansDetailsForm.tsx","index.tsx","pages/GuardiandRegisterOrEdit/EditGuardianInfoSection.tsx","pages/GuardiandRegisterOrEdit/RegisterGuardianSection.tsx","pages/GuardiandRegisterOrEdit/forms/RewardsDistributionFrequencyForm.tsx","pages/GuardiandRegisterOrEdit/EditRewardsDistributionSection.tsx","components/structure/ContentFitting.tsx","pages/GuardiandRegisterOrEdit/GuardianRegisterOrEditPage.tsx","components/structure/Footer.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","CryptoWalletConnectionStore","action","cryptoWalletConnectionService","addressCheckingInterval","undefined","reactionToWalletConnection","this","hasEthereumProvider","hasEventsSupport","reaction","isConnectedToWallet","isConnected","a","readInformationFromConnectedWallet","fireImmediately","onMainAddressChange","address","setMainAddress","readMainAddress","then","setInterval","requestConnectionPermission","permissionGranted","setWalletConnectionRequestApproved","walletConnectionRequestApproved","walletAddress","requestApproved","mainAddress","didUserApproveDappInThePast","observable","computed","ipvHexToV4","ipHex","slice","map","ipHexPart","parseInt","join","ipv4ToHex","ipv4","manualToHex","split","ipSection","toString","padStart","JSON_RPC_ERROR_CODES","userRejectedRequest","unauthorized","unsupportedMethod","emptyGuardianInfo","orbsAddr","contact","ip","website","name","emptyGuardianContractInteractionTimes","registrationTime","lastUpdateTime","OrbsAccountStore","cryptoWalletIntegrationStore","guardiansV2Service","addressChangeReaction","setDoneLoading","reactToConnectedAddressChanged","promievent","resetTxIndicators","setTxPending","console","log","code","setTxCanceled","guardianRegistrationPayload","promiEvent","registerGuardian","handlePromievent","manuallyReadAccountData","setTxHadError","error","guardianUpdatePayload","updateGuardianInfo","frequencyInHours","frequencyInSeconds","setGuardianDistributionFrequency","currentAddress","setDefaultAccountAddress","refreshAccountListeners","readDataForAccount","failLoadingProcess","accountAddress","setFromAccount","readAndSetIsGuardian","isGuardian","readAndSetGuardianInfo","catch","e","readAndSetRewardsDistributionFrequency","isRegisteredGuardian","setIsGuardian","readGuardianInfo","guardianInfoResponse","guardianInfo","guardianRegistrationTimeInfo","setGuardianInfo","setGuardianContractInteractionTimes","readGuardianDistributionFrequencyInSeconds","setRewardDistributionFrequencyInHours","cancelAllCurrentSubscriptions","setErrorLoading","doneLoading","errorLoading","txPending","txCanceled","txHadError","guardianContractInteractionTimes","rewardDistributionFrequencyInHours","CryptoWalletConnectionService","ethereum","web3","isMetamaskInstalled","isSemiCompliantEthereumProviderInstalled","isMetaMask","Web3","onFunction","on","enable","networkVersion","eth","getAccounts","accounts","getBlockNumber","onChange","Error","listener","off","selectedAddress","INFURA_KEY","process","REACT_APP_ETHEREUM_NETWORK","REACT_APP_INFURA_KEY","configs","urlBase","PUBLIC_BASE_PATH","v2contractsAddressesOverride","ETHEREUM_PROVIDER_WS","ORBS_NODE_URL","GuardiansV2Service","validatorsRegistrationAddress","validatorsRegistrationContract","Contract","ValidatorsRegistrationContractJson","abi","options","from","methods","isRegistered","call","getValidatorData","rawResponse","registration_time","last_update_time","getMetadata","rewardsFrequency","length","setMetadata","send","ipAsHex","registerValidator","updateValidator","baseTheme","responsiveFontSizes","createMuiTheme","palette","type","primary","main","secondary","text","background","default","typography","overrides","MuiPaper","root","MuiTypography","colorPrimary","MuiLink","configure","enforceActions","services","ethereumProvider","orbsClient","createAccount","publicKey","privateKey","signer","LocalSigner","Client","NetworkType","NETWORK_TYPE_TEST_NET","BuildOrbsClient","orbsClientService","OrbsClientService","providers","WebsocketProvider","cryptoWalletIntegrationService","validatorsRegistration","guardiansService","GuardiansService","buildServices","stores","orbsAccountStore","getStores","AppWrapper","React","memo","props","appComponent","StylesProvider","injectFirst","ThemeProvider","theme","maxSnack","useStyles","makeStyles","link","color","light","InTextLink","classes","href","others","className","target","rel","noEthereumProviderSection","display","flexDirection","alignItems","textAlign","padding","backgroundColor","borderRadius","width","maxWidth","boxSizing","NoEthereumProviderSection","walletConnectionPhase","actionFunction","tickerValue","pressedOnInstall","useBoolean","shouldDisplayLegalTicker","buttonIsEnabled","value","isInstall","titleText","subTitleText","buttonText","innerHtmlForLegalAgreement","renderToString","Typography","style","marginBottom","variant","Button","onClick","disabled","FormControlLabel","marginTop","control","Checkbox","checked","setValue","label","preventDefault","dangerouslySetInnerHTML","__html","centeredContainer","height","ContentContainer","useTheme","smallOrSmaller","useMediaQuery","breakpoints","down","Container","component","disableGutters","Background","withStyles","createStyles","zIndex","position","overflow","appVersion","bottom","left","triangle","opacity","fill","svgElm","top","transform","animation","id","xmlns","viewBox","d","title","flexGrow","Header","AppBar","Toolbar","page","backdrop","drawer","Page","children","NoEthereumProviderPage","hasPressed","installMetaMask","useCallback","open","setTrue","CssBaseline","useStores","useContext","MobXProviderContext","useCryptoWalletIntegrationStore","useOrbsAccountStore","ETHEREUM_ADDRESS_REGEX","IP_REGEX","validURL","str","RegExp","test","AppComponent","GuardiansDetailsForm","guardianAddress","guardianInitialInfo","submitInfo","actionButtonTitle","useForm","register","handleSubmit","errors","useStateful","contactInfo","ipAddress","nodeAddress","errorNodeAddress","errorIPAddress","errorWebsite","nameSetValue","websiteSetValue","contactInfoSetValue","ipAddressSetValue","nodeAddressSetValue","useEffect","submit","formData","onSubmit","TextField","fullWidth","required","inputRef","validate","helperText","pattern","avatar","margin","spacing","marginLeft","marginRight","EditGuardianInfoSection","updateGuardianDetails","lastUpdateDate","useMemo","fromUnixTime","Avatar","alignContent","textOverflow","whiteSpace","items","enter","leave","update","toggle","toLocaleString","demoInitialInfo","RegisterGuardianSection","RewardsDistributionFrequencyForm","currentFrequencyInHours","updateRewardsFrequency","isUsingDefaultValue","userWantsToChangeDefault","frequency","useNumber","Math","max","lowerLimit","errorRewardsFrequency","rewardsFrequencyInHours","submitUpdate","currentlyUsingText","initial","min","EditRewardsDistributionSection","contentFitter","ContentFitting","GuardiansRegisterOrEditPage","observer","content","enqueueSnackbar","useSnackbar","message","Divider","isUsingDefaultRewardFrequency","Backdrop","CircularProgress","bottomAppBar","justifyContent","paddingRight","paddingLeft","Footer","trigger","useScrollTrigger","Slide","appear","direction","in","version","paddingInlineEnd","justifySelf","app","flex","App","appContent","path","askToConnect","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0e97555.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { action, computed, observable, reaction } from \"mobx\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { IReactionDisposer } from \"mobx/lib/core/reaction\";\n\nexport class CryptoWalletConnectionStore {\n  @observable private walletConnectionRequestApproved: boolean = false;\n\n  @observable public hasEthereumProvider: boolean;\n  @observable public hasEventsSupport: boolean;\n\n  @observable public mainAddress: string = \"\";\n\n  private addressCheckingInterval?: NodeJS.Timeout = undefined;\n  reactionToWalletConnection: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletConnectionService: ICryptoWalletConnectionService\n  ) {\n    this.hasEthereumProvider =\n      cryptoWalletConnectionService.hasEthereumProvider;\n    this.hasEventsSupport = cryptoWalletConnectionService.hasEventsSupport;\n\n    this.reactionToWalletConnection = reaction(\n      () => this.isConnectedToWallet,\n      async (isConnected) => {\n        if (isConnected) {\n          this.readInformationFromConnectedWallet();\n        }\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n\n    if (this.hasEthereumProvider) {\n      // We will only detect address change if the Ethereum provider can support it\n      if (this.cryptoWalletConnectionService.hasEventsSupport) {\n        this.cryptoWalletConnectionService.onMainAddressChange((address) =>\n          this.setMainAddress(address)\n        );\n      } else {\n        // Else, we will read it one time + set an interval\n        this.cryptoWalletConnectionService\n          .readMainAddress()\n          .then((address) => this.setMainAddress(address));\n\n        this.addressCheckingInterval = setInterval(\n          () =>\n            this.cryptoWalletConnectionService\n              .readMainAddress()\n              .then((address) => this.setMainAddress(address)),\n          1000\n        );\n      }\n    }\n  }\n\n  @computed\n  public get isConnectedToWallet(): boolean {\n    return (\n      this.hasEthereumProvider &&\n      (this.cryptoWalletConnectionService.didUserApproveDappInThePast ||\n        this.walletConnectionRequestApproved)\n    );\n  }\n\n  public async askToConnect(): Promise<boolean> {\n    if (this.isConnectedToWallet) {\n      return true;\n    } else {\n      const permissionGranted = await this.cryptoWalletConnectionService.requestConnectionPermission();\n      this.setWalletConnectionRequestApproved(permissionGranted);\n\n      return this.walletConnectionRequestApproved;\n    }\n  }\n\n  private async readInformationFromConnectedWallet() {\n    const walletAddress = await this.cryptoWalletConnectionService.readMainAddress();\n\n    this.setMainAddress(walletAddress);\n  }\n\n  @action(\"setWalletConnectionRequestApproved\")\n  private setWalletConnectionRequestApproved(requestApproved: boolean) {\n    this.walletConnectionRequestApproved = requestApproved;\n  }\n\n  @action(\"setMainAddress\")\n  private setMainAddress(mainAddress: string) {\n    this.mainAddress = mainAddress;\n  }\n}\n","export const ipvHexToV4 = (ipHex: string) => {\n  const withoutPrefix = ipHex.slice(2);\n\n  const part1 = ipHex.slice(2, 4);\n  const part2 = ipHex.slice(4, 6);\n  const part3 = ipHex.slice(6, 8);\n  const part4 = ipHex.slice(8);\n  const parts = [part1, part2, part3, part4];\n\n  const toV4 = parts.map((ipHexPart) => parseInt(ipHexPart, 16)).join(\".\");\n\n  return toV4;\n};\n\nexport const ipv4ToHex = (ipv4: string) => {\n  const manualToHex = ipv4\n    .split(\".\")\n    .map((ipSection) => parseInt(ipSection).toString(16).padStart(2, \"0\"))\n    .join(\"\");\n\n  // Add the prefix\n  const ipAsHex = `0x${manualToHex}`;\n\n  return ipAsHex;\n};\n","// DEV_NOTE : Taken from typeless library 'eth-json-rpc-errors';\nexport const JSON_RPC_ERROR_CODES = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603,\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n  },\n};\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  observable,\n  reaction,\n} from \"mobx\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport {\n  IGuardiansV2Service,\n  TGuardianInfoResponse,\n  TGuardianRegistrationPayload,\n  TGuardianUpdatePayload,\n} from \"../services/guardiansV2Service/IGuardiansV2Service\";\nimport { EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE } from \"../services/guardiansV2Service/GuardiansV2ServiceConstants\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport { ipvHexToV4 } from \"../utils/utils\";\nimport { JSON_RPC_ERROR_CODES } from \"../constants/ethereumErrorCodes\";\n\nexport type TGuardianInfo = {\n  ip: string;\n  orbsAddr: string;\n  name: string;\n  website: string;\n  contact: string;\n};\n\nexport type TGuardianContractInteractionTimes = {\n  /**\n   * Unix timestamp\n   */\n  registrationTime: number;\n  /**\n   * Unix timestamp\n   */\n  lastUpdateTime: number;\n};\n\nconst emptyGuardianInfo: TGuardianInfo = {\n  orbsAddr: \"\",\n  contact: \"\",\n  ip: \"\",\n  website: \"\",\n  name: \"\",\n};\n\nconst emptyGuardianContractInteractionTimes: TGuardianContractInteractionTimes = {\n  registrationTime: 0,\n  lastUpdateTime: 0,\n};\n\nconst ONE_HOUR_IN_SECONDS = 60 * 60;\n\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport class OrbsAccountStore {\n  @observable public doneLoading = false;\n  @observable public errorLoading = false;\n  @observable public txPending = false;\n  @observable public txHadError = false;\n  @observable public txCanceled = false;\n  @observable public isGuardian = false;\n  @observable public guardianInfo: TGuardianInfo = emptyGuardianInfo;\n  @observable\n  public guardianContractInteractionTimes: TGuardianContractInteractionTimes = emptyGuardianContractInteractionTimes;\n  @observable\n  public rewardDistributionFrequencyInHours: number = EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE;\n\n  private addressChangeReaction: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private guardiansV2Service: IGuardiansV2Service\n  ) {\n    this.addressChangeReaction = reaction(\n      () => this.cryptoWalletIntegrationStore.mainAddress,\n      async (address) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedAddressChanged(address);\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Computed values ****\n  @computed public get isUsingDefaultRewardFrequency(): boolean {\n    return (\n      this.rewardDistributionFrequencyInHours ===\n      EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE\n    );\n  }\n\n  // **** Contract interactions ****\n  private async handlePromievent(\n    promievent: PromiEvent<TransactionReceipt>,\n    name = \"A promivent\"\n  ): Promise<void> {\n    this.resetTxIndicators();\n\n    // Indicate tx is pending\n    this.setTxPending(true);\n    console.log(`Waiting for promievent of ${name}`);\n\n    try {\n      const res = await promievent;\n      console.log(`Got Results for promievent of ${name}`);\n      return;\n    } catch (e) {\n      if (\n        (e as any).code === JSON_RPC_ERROR_CODES.provider.userRejectedRequest\n      ) {\n        this.setTxCanceled(true);\n      } else {\n        throw e;\n      }\n    } finally {\n      this.setTxPending(false);\n    }\n  }\n\n  public async registerGuardian(\n    guardianRegistrationPayload: TGuardianRegistrationPayload\n  ) {\n    try {\n      const promiEvent = this.guardiansV2Service.registerGuardian(\n        guardianRegistrationPayload\n      );\n\n      await this.handlePromievent(promiEvent, \"Register guardian\");\n\n      // After registering, lets re-read the data\n      await this.manuallyReadAccountData();\n    } catch (e) {\n      this.setTxHadError(true);\n      // TODO : Handle the error\n      console.error(`Failed registering guardian ${e}`);\n      throw e;\n    }\n  }\n\n  public async updateGuardianInfo(\n    guardianUpdatePayload: TGuardianUpdatePayload\n  ) {\n    try {\n      const promiEvent = this.guardiansV2Service.updateGuardianInfo(\n        guardianUpdatePayload\n      );\n\n      const res = await this.handlePromievent(promiEvent, \"Update guardian\");\n\n      // After registering, lets re-read the data\n      await this.manuallyReadAccountData();\n    } catch (e) {\n      this.setTxHadError(true);\n      // TODO : Handle the error\n      console.error(`Failed updating guardian info ${e}`);\n      throw e;\n    }\n  }\n\n  public async setGuardianDistributionFrequency(frequencyInHours: number) {\n    const frequencyInSeconds = frequencyInHours * ONE_HOUR_IN_SECONDS;\n\n    const promiEvent = this.guardiansV2Service.setGuardianDistributionFrequency(\n      frequencyInSeconds\n    );\n\n    try {\n      await this.handlePromievent(promiEvent, \"Set distribution frequency\");\n\n      // After updating, lets re-read the data\n      await this.manuallyReadAccountData();\n    } catch (e) {\n      // TODO : Handle the error\n      console.error(`Failed setting distribution frequency ${e}`);\n      throw e;\n    }\n  }\n\n  // **** Current address changed ****\n\n  private async reactToConnectedAddressChanged(currentAddress: string) {\n    if (currentAddress) {\n      this.setDefaultAccountAddress(currentAddress);\n\n      if (this.cryptoWalletIntegrationStore.hasEventsSupport) {\n        this.refreshAccountListeners(currentAddress);\n      }\n\n      try {\n        await this.readDataForAccount(currentAddress);\n      } catch (e) {\n        this.failLoadingProcess(e);\n        console.error(\n          \"Error in reacting to address change in Orbs Account Store\",\n          e\n        );\n      }\n    }\n  }\n\n  private setDefaultAccountAddress(accountAddress: string) {\n    this.guardiansV2Service.setFromAccount(accountAddress);\n    // this.stakingService.setFromAccount(accountAddress);\n    // this.orbsTokenService.setFromAccount(accountAddress);\n  }\n\n  // **** Data reading and setting ****\n\n  public async manuallyReadAccountData() {\n    try {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    } catch (e) {\n      this.failLoadingProcess(e);\n      console.error(\n        \"Error in manually reading address data in Orbs Account Store\",\n        e\n      );\n    }\n  }\n\n  private async readDataForAccount(accountAddress: string) {\n    // DEV_NOTE: We wait to check if this account is a Guardian because it\n    //           Affects on whether we need to read more data or not.\n    try {\n      await this.readAndSetIsGuardian(accountAddress);\n    } catch (e) {\n      console.error(`Error read-n-set isGuardian ${e}`);\n    }\n\n    if (this.isGuardian) {\n      this.readAndSetGuardianInfo(accountAddress).catch((e) =>\n        console.error(`Error read-n-set Guardian Info ${e}`)\n      );\n\n      this.readAndSetRewardsDistributionFrequency(accountAddress).catch((e) =>\n        console.error(`Error read-n-set Rewards Frequency ${e}`)\n      );\n    }\n  }\n\n  private async readAndSetIsGuardian(accountAddress: string) {\n    const isGuardian = await this.guardiansV2Service.isRegisteredGuardian(\n      accountAddress\n    );\n    this.setIsGuardian(isGuardian);\n  }\n\n  private async readAndSetGuardianInfo(accountAddress: string) {\n    this.guardiansV2Service\n      .readGuardianInfo(accountAddress)\n      .then((guardianInfoResponse) => {\n        const {\n          name,\n          website,\n          orbsAddr,\n          ip,\n          contact,\n          registrationTime,\n          lastUpdateTime,\n        } = guardianInfoResponse;\n\n        // DEV_NOTE : We update two different observables, one for the actual data, and the other for\n        //            the creation and editing time.\n        const guardianInfo: TGuardianInfo = {\n          name,\n          website,\n          ip: ipvHexToV4(ip),\n          contact,\n          orbsAddr,\n        };\n\n        const guardianRegistrationTimeInfo: TGuardianContractInteractionTimes = {\n          registrationTime,\n          lastUpdateTime,\n        };\n\n        this.setGuardianInfo(guardianInfo);\n        this.setGuardianContractInteractionTimes(guardianRegistrationTimeInfo);\n      });\n  }\n\n  private async readAndSetRewardsDistributionFrequency(accountAddress: string) {\n    const frequencyInSeconds = await this.guardiansV2Service.readGuardianDistributionFrequencyInSeconds(\n      accountAddress\n    );\n\n    const frequencyInHours = frequencyInSeconds / ONE_HOUR_IN_SECONDS;\n\n    this.setRewardDistributionFrequencyInHours(frequencyInHours);\n  }\n\n  // ****  Subscriptions ****\n\n  private async refreshAccountListeners(accountAddress: string) {\n    this.cancelAllCurrentSubscriptions();\n  }\n\n  private cancelAllCurrentSubscriptions() {}\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private resetTxIndicators() {\n    this.setTxPending(false);\n    this.setTxHadError(false);\n    this.setTxCanceled(false);\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setTxPending\")\n  private setTxPending(txPending: boolean) {\n    this.txPending = txPending;\n  }\n\n  @action(\"setTxCanceled\")\n  private setTxCanceled(txCanceled: boolean) {\n    this.txCanceled = txCanceled;\n  }\n\n  @action(\"setTxHadError\")\n  private setTxHadError(txHadError: boolean) {\n    this.txHadError = txHadError;\n  }\n\n  @action(\"setIsGuardian\")\n  private setIsGuardian(isGuardian: boolean) {\n    this.isGuardian = isGuardian;\n  }\n\n  @action(\"setGuardianInfo\")\n  private setGuardianInfo(guardianInfo: TGuardianInfo) {\n    this.guardianInfo = guardianInfo;\n  }\n\n  @action(\"setGuardianRegistrationTimes\")\n  private setGuardianContractInteractionTimes(\n    guardianContractInteractionTimes: TGuardianContractInteractionTimes\n  ) {\n    this.guardianContractInteractionTimes = guardianContractInteractionTimes;\n  }\n\n  @action(\"setRewardDistributionFrequencyInHours\")\n  private setRewardDistributionFrequencyInHours(\n    rewardDistributionFrequencyInHours: number\n  ) {\n    this.rewardDistributionFrequencyInHours = rewardDistributionFrequencyInHours;\n  }\n}\n","export const REWARDS_FREQUENCY_KEY = \"REWARDS_FREQUENCY_SEC\";\n\n/**\n * The value that will return for a guardian that did not change its distribution frequency.\n */\nexport const EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE = 0;\n\nexport const GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS = 12;\n","import Web3 from \"web3\";\nimport { ICryptoWalletConnectionService } from \"./ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"./IEthereumProvider\";\n\n// TODO : FUTURE : O.L : IMPORTANT : Get this service and all other common services into a package\n//        To be used by all web-products.\n// TODO : FUTURE : O.L : Change all ethereum.<call> to the new standard events format.\nexport class CryptoWalletConnectionService\n  implements ICryptoWalletConnectionService {\n  private readonly web3?: Web3;\n  public readonly hasEthereumProvider: boolean;\n  public readonly hasEventsSupport: boolean;\n  public readonly isMetamaskInstalled: boolean;\n  public readonly isSemiCompliantEthereumProviderInstalled: boolean;\n\n  constructor(private ethereum: IEthereumProvider) {\n    this.hasEthereumProvider = this.ethereum !== undefined;\n\n    // Distinguishes between installed ethereum providers\n    this.isMetamaskInstalled =\n      this.hasEthereumProvider && !!this.ethereum.isMetaMask;\n    this.isSemiCompliantEthereumProviderInstalled =\n      this.hasEthereumProvider && !this.ethereum.isMetaMask;\n\n    if (this.hasEthereumProvider) {\n      this.web3 = new Web3(this.ethereum as any);\n    }\n\n    const onFunction = this.hasEthereumProvider ? this.ethereum.on : undefined;\n    this.hasEventsSupport = onFunction !== undefined && onFunction !== null;\n  }\n\n  public async requestConnectionPermission(): Promise<boolean> {\n    try {\n      await this.ethereum.enable();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Getters\n  public get didUserApproveDappInThePast(): boolean {\n    // DEV_NOTE : O.L : IMPORTANT ! : This currently works with the soon to be deprecated apis of metamask injected 'ethereum'\n    //                                and is not part of the properties in the official types of web3.\n    //                                We need to check and find a better way to detect if the user has already approved wallet access.\n    // @ts-ignore\n    return this.isMetamaskInstalled && !!this.ethereum.selectedAddress;\n  }\n\n  async getIsMainNetwork(): Promise<boolean> {\n    return this.isMetamaskInstalled && this.ethereum.networkVersion === \"1\";\n  }\n\n  // Data \"reading\"\n  async readMainAddress(): Promise<string> {\n    const accounts = (await this.web3?.eth.getAccounts()) || [];\n    return accounts[0];\n  }\n\n  async readCurrentBlockNumber(): Promise<number> {\n    return this.web3?.eth.getBlockNumber() || 0;\n  }\n\n  // Event listeners\n  onMainAddressChange(onChange: (mainAddress: string) => void): () => void {\n    if (!this.hasEventsSupport) {\n      throw new Error(\n        `Cannot subscribe to events with given Ethereum provider`\n      );\n    }\n\n    const listener = (accounts: string[]) => onChange(accounts[0]);\n\n    this.ethereum.on(\"accountsChanged\", listener);\n\n    return () => {\n      this.ethereum.off(\"accountsChanged\", listener);\n    };\n  }\n}\n","import { IOrbsPosContractsAddresses } from \"orbs-pos-data\";\n\n/**\n * Copyright 2019 the prism authors\n * This file is part of the prism library in the Orbs project.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n * The above notice should be included in all copies or substantial portions of the software.\n */\n\ntype TSupportedNets = \"local\" | \"ropsten\" | \"mainnet\";\n// @ts-ignore\nconst ethereumNetwork: TSupportedNets = process.env.REACT_APP_ETHEREUM_NETWORK;\n\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY;\nexport const IS_DEV = process.env.NODE_ENV !== \"production\";\nconst SHOULD_OVERRIDE_ADDRESS = IS_DEV || ethereumNetwork === \"ropsten\";\n\n////////////// CONFIG VARIABLES ///////////////\ninterface IConfig {\n  urlBase: string;\n  v2contractsAddressesOverride: Partial<{\n    validatorsRegistration: string;\n  }>;\n  ETHEREUM_PROVIDER_WS: string;\n}\n\nconst configs: IConfig = {\n  urlBase: process.env.PUBLIC_BASE_PATH || \"\",\n  v2contractsAddressesOverride: {},\n  ETHEREUM_PROVIDER_WS: `wss://mainnet.infura.io/ws/v3/${INFURA_KEY}`,\n};\n\n// Webpack will remove this section on production build //\nif (process.env.NODE_ENV !== \"production\") {\n  if (ethereumNetwork === \"local\") {\n    const addresses = require(\"./local/addresses.json\");\n\n    configs.v2contractsAddressesOverride.validatorsRegistration =\n      addresses.validatorsRegistration;\n  }\n}\n\nexport default configs;\n","import { Client, createAccount, NetworkType } from \"orbs-client-sdk\";\nimport { LocalSigner } from \"orbs-client-sdk\";\n\n// TODO : IMPORTANT : O.L : This file is a duplicate from 'staking wallet', extract it to a common code.\n\nconst ORBS_VIRTUAL_CHAIN_ID = 1_100_000; // The virtual chain Id on the Orbs network\nconst ORBS_NODE_ADDRESS = \"validator.orbs.com\"; // The Orbs node that we will query\nconst PROTOCOL = \"https\";\nconst ORBS_NODE_URL = `${PROTOCOL}://${ORBS_NODE_ADDRESS}/vchains/${ORBS_VIRTUAL_CHAIN_ID.toString()}`;\n\nexport function BuildOrbsClient(): Client {\n  const { publicKey, privateKey } = createAccount();\n  const signer = new LocalSigner({ publicKey, privateKey });\n  return new Client(\n    ORBS_NODE_URL,\n    ORBS_VIRTUAL_CHAIN_ID,\n    NetworkType.NETWORK_TYPE_TEST_NET,\n    signer\n  );\n}\n","import Web3 from \"web3\";\nimport { Contract } from \"web3-eth-contract\";\nimport { AbiItem } from \"web3-utils\";\nimport ValidatorsRegistrationContractJson from \"@orbs-network/orbs-ethereum-contracts-v2/build/contracts/ValidatorsRegistration.json\";\nimport {\n  IGuardiansV2Service,\n  TGuardianInfoResponse,\n  TGuardianRegistrationPayload,\n  TGuardianUpdatePayload,\n} from \"./IGuardiansV2Service\";\nimport { ValidatorsRegistration } from \"../../contracts/ValidatorsRegistration\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport {\n  EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE,\n  REWARDS_FREQUENCY_KEY,\n} from \"./GuardiansV2ServiceConstants\";\nimport { ipv4ToHex } from \"../../utils/utils\";\n\n// TODO : O.L : Fill it up after deploying,\nconst MAIN_NET_VALIDATORS_REGISTRATION_ADDRESS = \"\";\n\nexport class GuardiansV2Service implements IGuardiansV2Service {\n  private validatorsRegistrationContract: ValidatorsRegistration;\n\n  constructor(\n    private web3: Web3,\n    validatorsRegistrationAddress: string = MAIN_NET_VALIDATORS_REGISTRATION_ADDRESS\n  ) {\n    this.validatorsRegistrationContract = (new this.web3.eth.Contract(\n      ValidatorsRegistrationContractJson.abi as AbiItem[],\n      validatorsRegistrationAddress\n    ) as any) as ValidatorsRegistration;\n  }\n\n  setFromAccount(address: string): void {\n    this.validatorsRegistrationContract.options.from = address;\n  }\n\n  public async isRegisteredGuardian(address: string): Promise<boolean> {\n    return this.validatorsRegistrationContract.methods\n      .isRegistered(address)\n      .call();\n  }\n\n  public async readGuardianInfo(\n    address: string\n  ): Promise<TGuardianInfoResponse> {\n    const rawResponse = await this.validatorsRegistrationContract.methods\n      .getValidatorData(address)\n      .call();\n\n    const {\n      registration_time,\n      orbsAddr,\n      name,\n      last_update_time,\n      ip,\n      contact,\n      website,\n    } = rawResponse;\n\n    const guardianInfoResponse: TGuardianInfoResponse = {\n      contact,\n      ip,\n      lastUpdateTime: parseInt(last_update_time),\n      name,\n      orbsAddr,\n      registrationTime: parseInt(registration_time),\n      website,\n    };\n\n    return guardianInfoResponse;\n  }\n\n  public async readGuardianDistributionFrequencyInSeconds(\n    address: string\n  ): Promise<number> {\n    const rewardsFrequency = await this.validatorsRegistrationContract.methods\n      .getMetadata(address, REWARDS_FREQUENCY_KEY)\n      .call();\n\n    if (!rewardsFrequency || !rewardsFrequency.length) {\n      return EMPTY_GUARDIAN_REWARDS_FREQUENCY_VALUE;\n    }\n\n    return parseInt(rewardsFrequency);\n  }\n\n  public setGuardianDistributionFrequency(\n    frequencyInSeconds: number\n  ): PromiEvent<TransactionReceipt> {\n    return this.validatorsRegistrationContract.methods\n      .setMetadata(REWARDS_FREQUENCY_KEY, frequencyInSeconds.toString())\n      .send();\n  }\n\n  public registerGuardian(\n    guardianRegistrationPayload: TGuardianRegistrationPayload\n  ): PromiEvent<TransactionReceipt> {\n    const {\n      website,\n      name,\n      orbsAddr,\n      ip,\n      contact,\n    } = guardianRegistrationPayload;\n\n    const ipAsHex = ipv4ToHex(ip);\n\n    return this.validatorsRegistrationContract.methods\n      .registerValidator(ipAsHex, orbsAddr, name, website, contact)\n      .send();\n  }\n\n  public updateGuardianInfo(\n    guardianUpdatePayload: TGuardianUpdatePayload\n  ): PromiEvent<TransactionReceipt> {\n    const { contact, ip, name, orbsAddr, website } = guardianUpdatePayload;\n    const ipAsHex = ipv4ToHex(ip);\n    return this.validatorsRegistrationContract.methods\n      .updateValidator(ipAsHex, orbsAddr, name, website, contact)\n      .send();\n  }\n}\n","import { blue } from \"@material-ui/core/colors\";\nimport responsiveFontSizes from \"@material-ui/core/styles/responsiveFontSizes\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\n\nconst COLOR1 = \"#0D0D0D\"; // dark gray\nconst COLOR2 = \"#6ec6d8\"; // bluish\nconst COLOR3 = \"#03FCF5\"; // bright bluish- Tetra\n\n// const PRIMARY_TEXT = '#dbdbdb';\nconst PRIMARY_TEXT = \"#dbdbdb\";\nconst SECONDARY_TEXT = \"#7B7B7B\";\n\nexport const baseTheme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      // TODO : Adjust all styles after structure is done\n      type: \"dark\",\n      primary: {\n        main: \"rgba(16, 34, 91, 0.7)\",\n      },\n      secondary: {\n        main: \"#7ccbf4\",\n      },\n      text: {\n        // primary: PRIMARY_TEXT,\n        // secondary: SECONDARY_TEXT,\n      },\n      background: {\n        // DEV_NOTE : This sets the app background color\n        default: \"#16317d\",\n        // paper: \"rgba(0, 31, 107, 0.6)\",\n      },\n    },\n    typography: {\n      // fontFamily: 'Montserrat',\n    },\n    overrides: {\n      MuiPaper: {\n        root: {\n          // backgroundColor: COLOR1,\n        },\n      },\n      MuiTypography: {\n        colorPrimary: {\n          // color: PRIMARY_TEXT,\n        },\n      },\n      MuiLink: {\n        root: {\n          // color: blue[500],\n        },\n      },\n    },\n  })\n);\n\nexport const AppStyles = {};\n","import { configure } from \"mobx\";\nimport { IStores } from \"./stores\";\nimport {\n  IOrbsPOSDataService,\n  IStakingService,\n  IOrbsTokenService,\n  IGuardiansService,\n  IOrbsRewardsService,\n} from \"orbs-pos-data\";\n\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { OrbsAccountStore } from \"./OrbsAccountStore\";\nimport { IGuardiansV2Service } from \"../services/guardiansV2Service/IGuardiansV2Service\";\n\n// This import ensures mobx batching\nimport \"mobx-react-lite/batchingForReactDom\";\n\n/**\n * Configures the mobx library. Should get called at App's initialization.\n */\nexport function configureMobx() {\n  configure({\n    enforceActions: \"observed\",\n  });\n}\n\n/**\n * Builds and initializes all of the stores\n */\nexport function getStores(\n  cryptoWalletConnectionService: ICryptoWalletConnectionService,\n  guardiansV2Service: IGuardiansV2Service\n): IStores {\n  // Create stores instances + Hydrate the stores\n  const cryptoWalletIntegrationStore = new CryptoWalletConnectionStore(\n    cryptoWalletConnectionService\n  );\n  const orbsAccountStore = new OrbsAccountStore(\n    cryptoWalletIntegrationStore,\n    guardiansV2Service\n  );\n\n  const stores: IStores = {\n    cryptoWalletIntegrationStore,\n    orbsAccountStore,\n  };\n\n  return stores;\n}\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"mobx-react\";\nimport App from \"./App\";\nimport { configureMobx, getStores } from \"./store/storesInitialization\";\nimport { buildServices } from \"./services/Services\";\nimport { StylesProvider, ThemeProvider } from \"@material-ui/core/styles\";\nimport { AppStyles, baseTheme } from \"./theme/Theme\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\n\ninterface IProps {\n  appComponent: React.ReactNode;\n}\n\nconfigureMobx();\n\nconst ethereumProvider = (window as any).ethereum;\nconst services = buildServices(ethereumProvider);\nconst stores = getStores(\n  services.cryptoWalletIntegrationService,\n  services.guardiansV2Service\n);\n\nexport const AppWrapper = React.memo<IProps>((props) => {\n  console.log(\"Wrapper render\");\n  const { appComponent } = props;\n  return (\n    <Router>\n      <Provider {...stores} {...services}>\n        <StylesProvider injectFirst>\n          <ThemeProvider theme={baseTheme}>\n            <SnackbarProvider maxSnack={3}>{appComponent}</SnackbarProvider>\n          </ThemeProvider>\n        </StylesProvider>\n      </Provider>\n    </Router>\n  );\n});\n","import { IEthereumProvider } from \"./cryptoWalletConnectionService/IEthereumProvider\";\nimport { CryptoWalletConnectionService } from \"./cryptoWalletConnectionService/CryptoWalletConnectionService\";\nimport { ICryptoWalletConnectionService } from \"./cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport {\n  GuardiansService,\n  IGuardiansService,\n  IOrbsClientService,\n  OrbsClientService,\n} from \"orbs-pos-data\";\nimport Web3 from \"web3\";\nimport configs from \"../configs\";\nimport { BuildOrbsClient } from \"./OrbsClientFactory\";\nimport { IGuardiansV2Service } from \"./guardiansV2Service/IGuardiansV2Service\";\nimport { GuardiansV2Service } from \"./guardiansV2Service/GuardiansV2Service\";\n\nexport interface IServices {\n  cryptoWalletIntegrationService: ICryptoWalletConnectionService;\n  guardiansV2Service: IGuardiansV2Service;\n  guardiansService: IGuardiansService;\n}\n\n// DEV_NOTE : For simplicity of early stage dev, we assume that we have ethereum provider, if not, we will not initialize the services.\nexport function buildServices(ethereumProvider: IEthereumProvider): IServices {\n  let web3: Web3;\n\n  const orbsClient = BuildOrbsClient();\n  const orbsClientService: IOrbsClientService = new OrbsClientService(\n    orbsClient\n  );\n\n  if (ethereumProvider) {\n    web3 = new Web3(ethereumProvider as any);\n  } else {\n    web3 = new Web3(\n      new Web3.providers.WebsocketProvider(configs.ETHEREUM_PROVIDER_WS)\n    );\n  }\n\n  return {\n    cryptoWalletIntegrationService: new CryptoWalletConnectionService(\n      ethereumProvider\n    ),\n    guardiansV2Service: new GuardiansV2Service(\n      web3,\n      configs.v2contractsAddressesOverride.validatorsRegistration\n    ),\n    guardiansService: new GuardiansService(web3, orbsClientService),\n  };\n}\n","import React, { DetailedHTMLProps } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface IProps {\n  text: string;\n  href?: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  link: {\n    color: theme.palette.secondary.light,\n    \"&:hover\": {\n      color: theme.palette.secondary.main,\n    },\n  },\n}));\n\nexport const InTextLink = React.memo<\n  IProps &\n    DetailedHTMLProps<\n      React.AnchorHTMLAttributes<HTMLAnchorElement>,\n      HTMLAnchorElement\n    >\n>((props) => {\n  const classes = useStyles();\n  const { text, href, ...others } = props;\n  return (\n    <a\n      className={classes.link}\n      href={href || \"\"}\n      target={\"_blank\"}\n      rel={\"noopener noreferrer\"}\n      // style={{ display: \"inline\" }}\n      {...others}\n    >\n      {text}\n    </a>\n  );\n});\n","import React from \"react\";\nimport {\n  Button,\n  FormControl,\n  FormControlLabel,\n  Typography,\n  useTheme,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useBoolean } from \"react-hanger\";\nimport { renderToString } from \"react-dom/server\";\nimport { InTextLink } from \"../components/InTextLink\";\n\ntype TWalletConnectionPhase = \"install\" | \"connect\";\n\ninterface IProps {\n  walletConnectionPhase: TWalletConnectionPhase;\n  actionFunction: () => void;\n  pressedOnInstall?: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  noEthereumProviderSection: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    // justifyContent: \"space-between\",\n    padding: \"2em\",\n    backgroundColor: \"rgba(0,0,0, 0.2)\",\n    borderRadius: \"5%\",\n    // width: \"clamp(20%, 40em, 100%)\",\n    width: \"fit-content\",\n    maxWidth: \"90%\",\n    boxSizing: \"border-box\",\n    // height: \"clamp(max(25%, 200px), 8em, 50%)\",\n  },\n}));\n\nexport const NoEthereumProviderSection = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { walletConnectionPhase, actionFunction, pressedOnInstall } = props;\n\n  const tickerValue = useBoolean(false);\n\n  const shouldDisplayLegalTicker = walletConnectionPhase === \"connect\";\n  const buttonIsEnabled = !shouldDisplayLegalTicker || tickerValue.value;\n\n  const isInstall = walletConnectionPhase === \"install\";\n\n  const titleText = isInstall\n    ? \"No Ethereum provider detected\"\n    : \"Please connect\";\n  const subTitleText = isInstall\n    ? \"you should install MetaMask and refresh the page\"\n    : \"To begin, connect your wallet\";\n  const buttonText =\n    walletConnectionPhase === \"install\" ? \"Install\" : \"Connect\";\n\n  const innerHtmlForLegalAgreement = renderToString(\n    <Typography>\n      I agree to the <InTextLink text={\"Terms of Use\"} /> and{\" \"}\n      <InTextLink href=\"\" text={\"Privacy Policy\"} />\n    </Typography>\n  );\n\n  return (\n    <div className={classes.noEthereumProviderSection}>\n      <Typography style={{ marginBottom: \"0.5rem\" }} variant={\"h4\"}>\n        {titleText}\n      </Typography>\n      <Typography style={{ marginBottom: \"1rem\" }}>{subTitleText}</Typography>\n      <Button\n        variant={\"outlined\"}\n        onClick={actionFunction}\n        disabled={!buttonIsEnabled}\n      >\n        {buttonText}\n      </Button>\n      {shouldDisplayLegalTicker && (\n        <FormControlLabel\n          style={{\n            marginTop: \"0.5rem\",\n          }}\n          control={\n            <Checkbox\n              checked={tickerValue.value}\n              onChange={(e) => tickerValue.setValue(e.target.checked)}\n              name={\"legalTicker\"}\n            />\n          }\n          label={\n            <Typography\n              onClick={(e) => e.preventDefault()}\n              dangerouslySetInnerHTML={{ __html: innerHtmlForLegalAgreement }}\n            />\n          }\n        />\n      )}\n    </div>\n  );\n});\n","import React from \"react\";\nimport { Container, ContainerProps, useMediaQuery } from \"@material-ui/core\";\nimport useTheme from \"@material-ui/core/styles/useTheme\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  centeredContainer: {\n    // marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    height: \"100%\",\n  },\n}));\n\nexport const ContentContainer = React.memo<ContainerProps>((props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const smallOrSmaller = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  return (\n    <Container\n      className={classes.centeredContainer}\n      component={\"main\"}\n      disableGutters={smallOrSmaller}\n      {...props}\n    />\n  );\n});\n","/**\n * Copyright 2019 the prism authors\n * This file is part of the prism library in the Orbs project.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n * The above notice should be included in all copies or substantial portions of the software.\n */\n\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core/styles\";\nimport * as React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      height: \"100%\",\n      zIndex: -1000,\n      position: `absolute`,\n      overflow: \"hidden\",\n    },\n    appVersion: {\n      position: `fixed`,\n      bottom: 4,\n      left: 4,\n    },\n    triangle: {\n      opacity: 0.25,\n      fill: \"#08e4f4\",\n    },\n    svgElm: {\n      top: -320,\n      left: -80,\n      position: \"relative\",\n      height: 1500,\n      opacity: 0.1,\n      transform: `rotate(15deg)`,\n      animation: \"rotate 500s linear infinite\",\n    },\n    \"@keyframes rotate\": {\n      \"0%\": {\n        transform: \"rotate(15deg)\",\n      },\n      \"100%\": {\n        transform: \"rotate(375deg)\",\n      },\n    },\n  });\n\ninterface IProps extends WithStyles<typeof styles> {}\n\nexport const Background = withStyles(styles)(\n  class extends React.Component<IProps> {\n    public render() {\n      const { classes } = this.props;\n      return (\n        <div id={\"appBackground\"} className={classes.root}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className={classes.svgElm}\n            viewBox=\"0 0 100 100\"\n          >\n            <path\n              className={classes.triangle}\n              d=\"m8.44388,72.186002l59.79,0a5.46,5.46 0 0 0 4.58,-8.41l-29.85,-46.28a5.45,5.45 0 0 0 -9.16,0l-29.93,46.28a5.45,5.45 0 0 0 4.57,8.41z\"\n            />\n            <path\n              className={classes.triangle}\n              d=\"m20.93,78.176003l58.6,0a6.09,6.09 0 0 0 5.12,-9.4l-29.2,-45.28a5.45,5.45 0 0 0 -9.16,0l-29.93,46.27a5.45,5.45 0 0 0 4.57,8.41z\"\n            />\n            <path\n              className={classes.triangle}\n              d=\"m32.443882,84.176l58.6,0a6.09,6.09 0 0 0 5.12,-9.4l-29.2,-45.28a5.45,5.45 0 0 0 -9.16,0l-29.93,46.27a5.45,5.45 0 0 0 4.57,8.41z\"\n            />\n          </svg>\n          {/*<Typography className={classes.appVersion} variant=\"caption\">*/}\n          {/*  {prismVersion}*/}\n          {/*</Typography>*/}\n        </div>\n      );\n    }\n  }\n);\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n    textAlign: \"center\",\n    marginTop: \"1em\",\n    marginBottom: \"1em\",\n  },\n}));\n\nexport const Header = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  return (\n    <AppBar position={\"absolute\"}>\n      <Toolbar>\n        <div className={classes.title}>\n          <Typography variant=\"h5\">ORBS Guardians Portal</Typography>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Toolbar } from \"@material-ui/core\";\nimport { Footer } from \"./Footer\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  page: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    // border: \"1px solid black\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    boxSizing: \"border-box\",\n    padding: \"2em\",\n    height: \"100%\",\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n}));\n\nexport const Page = React.memo<IProps>((props) => {\n  const { children } = props;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.page}>\n      {/* DEV_NOTE : Adding 'toolbar' to keep with the tile */}\n      <Toolbar />\n      {children}\n    </div>\n  );\n});\n","import React, { useCallback } from \"react\";\nimport { CssBaseline, useTheme } from \"@material-ui/core\";\nimport { NoEthereumProviderSection } from \"./NoEthereumProviderSection\";\nimport { useBoolean } from \"react-hanger\";\nimport { ContentContainer } from \"../components/structure/ContentContainer\";\nimport { Background } from \"../components/structure/Background\";\nimport { Header } from \"../components/structure/Header\";\nimport { Page } from \"../components/structure/Page\";\n\ntype TWalletConnectionPhase = \"install\" | \"connect\";\n\ninterface IProps {}\n\nexport const NoEthereumProviderPage = React.memo<IProps>((props) => {\n  const hasPressed = useBoolean(false);\n\n  const installMetaMask = useCallback(() => {\n    window.open(\"https://metamask.io/\", \"_blank\");\n    hasPressed.setTrue();\n  }, [hasPressed]);\n\n  return (\n    <>\n      <Header />\n      <main className=\"App\" style={{ height: \"100%\" }}>\n        <Background />\n        <ContentContainer id={\"appContainer\"}>\n          <Page>\n            <NoEthereumProviderSection\n              walletConnectionPhase={\"install\"}\n              actionFunction={installMetaMask}\n            />\n          </Page>\n        </ContentContainer>\n        <CssBaseline />\n      </main>\n    </>\n  );\n});\n","import React from \"react\";\nimport { MobXProviderContext } from \"mobx-react\";\nimport { IStores } from \"./stores\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { OrbsAccountStore } from \"./OrbsAccountStore\";\n\nexport function useStores(): IStores {\n  // @ts-ignore\n  return React.useContext(MobXProviderContext);\n}\n\nexport function useCryptoWalletIntegrationStore(): CryptoWalletConnectionStore {\n  return useStores().cryptoWalletIntegrationStore;\n}\n\nexport function useOrbsAccountStore(): OrbsAccountStore {\n  return useStores().orbsAccountStore;\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport { useStateful } from \"react-hanger\";\nimport { TGuardianRegistrationPayload } from \"../../../services/guardiansV2Service/IGuardiansV2Service\";\nimport { Button, TextField, Typography } from \"@material-ui/core\";\nimport { TGuardianInfo } from \"../../../store/OrbsAccountStore\";\nimport { useForm } from \"react-hook-form\";\n\ninterface IProps {\n  actionButtonTitle: string;\n  guardianAddress: string;\n  guardianInitialInfo: TGuardianInfo;\n  submitInfo: (\n    guardianRegistrationPayload: TGuardianRegistrationPayload\n  ) => void;\n}\n\nconst ETHEREUM_ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nconst IP_REGEX = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\n\nconst NODE_ADDRESS_MESSAGE = \"Must use a valid address\";\nconst IP_ADDRESS_MESSAGE = \"Must use a valid IPV4 address\";\nconst WEBSITE_MESSAGE = \"Must use a URL\";\n\nfunction validURL(str: string) {\n  const pattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n    \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\n    \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n    \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\n    \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  return !!pattern.test(str);\n}\n\ntype TFormData = {\n  // guardianAddress: string;\n  name: string;\n  website: string;\n  contactInfo: string;\n  ipAddress: string;\n  nodeAddress: string;\n};\n\n/**\n * A single component to handle both \"Guardian registration\" and \"Guardian Update\"\n */\nexport const GuardiansDetailsForm = React.memo<IProps>((props) => {\n  const {\n    guardianAddress,\n    guardianInitialInfo,\n    submitInfo,\n    actionButtonTitle,\n  } = props;\n\n  const { register, handleSubmit, errors } = useForm<TFormData>();\n\n  const name = useStateful(guardianInitialInfo.name);\n  const website = useStateful(guardianInitialInfo.website);\n  const contactInfo = useStateful(guardianInitialInfo.contact);\n  const ipAddress = useStateful(guardianInitialInfo.ip);\n  const nodeAddress = useStateful(guardianInitialInfo.orbsAddr);\n\n  const errorNodeAddress = !!errors.nodeAddress;\n  const errorIPAddress = !!errors.ipAddress;\n  const errorWebsite = !!errors.website;\n\n  // DEV_NOTE : Taking ref for eslint-hooks\n  const nameSetValue = name.setValue;\n  const websiteSetValue = website.setValue;\n  const contactInfoSetValue = contactInfo.setValue;\n  const ipAddressSetValue = ipAddress.setValue;\n  const nodeAddressSetValue = nodeAddress.setValue;\n\n  // DEV_NOTE : O.L : This is a hack to enforce update after registration,\n  // TODO : O.L : Fix this\n  useEffect(() => {\n    if (guardianInitialInfo) {\n      console.log(\"Re-setting data\");\n      nameSetValue(guardianInitialInfo.name);\n      websiteSetValue(guardianInitialInfo.website);\n      contactInfoSetValue(guardianInitialInfo.contact);\n      ipAddressSetValue(guardianInitialInfo.ip);\n      nodeAddressSetValue(guardianInitialInfo.orbsAddr);\n    }\n  }, [\n    contactInfoSetValue,\n    guardianInitialInfo,\n    ipAddressSetValue,\n    nameSetValue,\n    nodeAddressSetValue,\n    websiteSetValue,\n  ]);\n\n  // TODO : O.L : Add tx progress indicator\n  const submit = useCallback(\n    (formData: TFormData) => {\n      const guardianRegistrationPayload: TGuardianRegistrationPayload = {\n        ip: formData.ipAddress,\n        orbsAddr: formData.nodeAddress,\n        name: formData.name,\n        website: formData.website,\n        contact: formData.contactInfo,\n      };\n      submitInfo(guardianRegistrationPayload);\n    },\n    [submitInfo]\n  );\n\n  // TODO : FUTURE : This forms will not look good on mobile, fix the text overflow\n  return (\n    <form\n      onSubmit={handleSubmit((formData) => submit(formData))}\n      style={{\n        maxWidth: \"100%\",\n        width: \"100%\",\n      }}\n    >\n      {/*<TextField*/}\n      {/*  required*/}\n      {/*  style={{*/}\n      {/*    width: \"max-content\",*/}\n      {/*  }}*/}\n      {/*  // fullWidth*/}\n      {/*  inputProps={{*/}\n      {/*    style: {*/}\n      {/*      width: \"max-content\",*/}\n      {/*    },*/}\n      {/*  }}*/}\n      {/*  name={\"guardianAddress\"}*/}\n      {/*  title={\"guardianAddress\"}*/}\n      {/*  label={\"Guardian Address\"}*/}\n      {/*  value={guardianAddress}*/}\n      {/*  disabled*/}\n      {/*  inputRef={register}*/}\n      {/*/>*/}\n      {/*<br />*/}\n      <TextField\n        fullWidth\n        name={\"name\"}\n        label={\"name\"}\n        value={name.value}\n        onChange={(e) => name.setValue(e.target.value)}\n        required\n        inputRef={register}\n      />\n      <br />\n      <TextField\n        fullWidth\n        name={\"website\"}\n        title={\n          \"A valid website URL is required. The Guardian website is used by delegators when selecting a Guardian.\\n\"\n        }\n        label={\"website\"}\n        value={website.value}\n        onChange={(e) => website.setValue(e.target.value)}\n        required\n        inputRef={register({ validate: validURL })}\n        error={errorWebsite}\n        helperText={errorWebsite && WEBSITE_MESSAGE}\n      />\n      <br />\n      <TextField\n        fullWidth\n        name={\"contactInfo\"}\n        title={\"contactInfo\"}\n        label={\"Contact Info\"}\n        value={contactInfo.value}\n        onChange={(e) => contactInfo.setValue(e.target.value)}\n        required\n        inputRef={register}\n      />\n      <br />\n      <TextField\n        fullWidth\n        name={\"ipAddress\"}\n        title={\n          \"A valid IPv4 address is required to allow the Guardian’s node to connect to the network gossip topology.\"\n        }\n        label={\"IP\"}\n        value={ipAddress.value}\n        onChange={(e) => ipAddress.setValue(e.target.value)}\n        required\n        inputRef={register({ pattern: IP_REGEX })}\n        error={errorIPAddress}\n        helperText={errorIPAddress && IP_ADDRESS_MESSAGE}\n      />\n\n      <br />\n      <TextField\n        fullWidth\n        name={\"nodeAddress\"}\n        title={\n          \"The node address is used for signing blocks on Orbs and sending automated \\n node notification transactions such as ready or auto voteout.\"\n        }\n        label={\"Node Address\"}\n        value={nodeAddress.value}\n        onChange={(e) => nodeAddress.setValue(e.target.value)}\n        required\n        inputRef={register({ pattern: ETHEREUM_ADDRESS_REGEX })}\n        error={errorNodeAddress}\n        helperText={errorNodeAddress && NODE_ADDRESS_MESSAGE}\n      />\n      <br />\n      <br />\n      <Button variant={\"outlined\"} fullWidth type={\"submit\"}>\n        {actionButtonTitle}\n      </Button>\n    </form>\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AppWrapper } from \"./AppWrapper\";\nimport { NoEthereumProviderPage } from \"./pages/NoEthereumProviderPage\";\nimport App from \"./App\";\n\nconst hasEthereumProvider = !!(window as any).ethereum;\n\nlet AppComponent;\n\nif (hasEthereumProvider) {\n  AppComponent = <App />;\n} else {\n  AppComponent = <NoEthereumProviderPage />;\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper appComponent={AppComponent} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useMemo } from \"react\";\nimport { fromUnixTime } from \"date-fns\";\nimport {\n  TGuardianInfo,\n  TGuardianContractInteractionTimes,\n} from \"../../store/OrbsAccountStore\";\nimport { GuardiansDetailsForm } from \"./forms/GuradiansDetailsForm\";\nimport { TGuardianUpdatePayload } from \"../../services/guardiansV2Service/IGuardiansV2Service\";\nimport {\n  Paper,\n  Typography,\n  Avatar,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { Transition } from \"react-spring/renderprops-universal\";\nimport { GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS } from \"../../services/guardiansV2Service/GuardiansV2ServiceConstants\";\n\ninterface IProps {\n  guardianAddress: string;\n  // Props for Guardian info\n  guardianInfo: TGuardianInfo;\n  updateGuardianDetails: (\n    guardianRegistrationPayload: TGuardianUpdatePayload\n  ) => void;\n  guardianContractInteractionTimes: TGuardianContractInteractionTimes;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n}));\n\nexport const EditGuardianInfoSection = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    guardianInfo,\n    guardianAddress,\n    updateGuardianDetails,\n    guardianContractInteractionTimes,\n  } = props;\n\n  const { lastUpdateTime, registrationTime } = guardianContractInteractionTimes;\n\n  const registrationDate = useMemo(() => {\n    return fromUnixTime(registrationTime);\n  }, [registrationTime]);\n\n  const lastUpdateDate = useMemo(() => {\n    return fromUnixTime(lastUpdateTime);\n  }, [lastUpdateTime]);\n\n  return (\n    <>\n      <Avatar className={classes.avatar}>\n        <EditIcon />\n      </Avatar>\n      <div\n        style={{\n          textAlign: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignContent: \"center\",\n          overflow: \"hidden\",\n        }}\n      >\n        <Typography variant={\"h5\"}>Guardian details update</Typography>\n        <Typography\n          style={{\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden\",\n          }}\n        >\n          {guardianAddress}\n        </Typography>\n      </div>\n      <GuardiansDetailsForm\n        guardianAddress={guardianAddress}\n        submitInfo={updateGuardianDetails}\n        guardianInitialInfo={guardianInfo}\n        actionButtonTitle={\"Update\"}\n      />\n      <br />\n      {/*<Typography variant={\"h6\"}>*/}\n      {/*  Guardian registered: {registrationDate.toLocaleString()}*/}\n      {/*</Typography>*/}\n      <Transition\n        items={lastUpdateDate}\n        // config={config.gentle}\n        // immediate={DISABLE_ANIMATIONS}\n\n        from={{\n          // position: \"absolute\",\n          opacity: 0,\n          // transform: \"translateX(1%)\",\n        }}\n        enter={{\n          opacity: 1,\n          // transform: \"translateX(0%)\",\n        }}\n        leave={{\n          opacity: 0,\n          // transform: \"translateX(1%)\",\n          // position: \"absolute\",\n          display: \"none\",\n        }}\n        update={{\n          opacity: 1,\n        }}\n      >\n        {(toggle) => (props) => (\n          <Typography variant={\"h6\"} style={props}>\n            Details Last updated: {lastUpdateDate.toLocaleString()}\n          </Typography>\n        )}\n      </Transition>\n      <br />\n    </>\n  );\n});\n","import React from \"react\";\nimport { TGuardianRegistrationPayload } from \"../../services/guardiansV2Service/IGuardiansV2Service\";\nimport { GuardiansDetailsForm } from \"./forms/GuradiansDetailsForm\";\nimport { TGuardianInfo } from \"../../store/OrbsAccountStore\";\nimport { Avatar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PersonIcon from \"@material-ui/icons/Person\";\n\ninterface IProps {\n  guardianAddress: string;\n  registerGuardian: (\n    guardianRegistrationPayload: TGuardianRegistrationPayload\n  ) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n}));\n\nconst demoInitialInfo: TGuardianInfo = {\n  orbsAddr: \"0xe30a30069209aa4e7e7b07ab391966a0f071afd9\",\n  ip: \"12.114.252.82\",\n  contact: \"A's contact info\",\n  website: \"a.com\",\n  name: \"A\",\n};\nconst emptyInitialInfo: TGuardianInfo = {\n  orbsAddr: \"\",\n  ip: \"\",\n  contact: \"\",\n  website: \"\",\n  name: \"\",\n};\n\nexport const RegisterGuardianSection = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { guardianAddress, registerGuardian } = props;\n\n  return (\n    <>\n      <Avatar className={classes.avatar}>\n        <PersonIcon />\n      </Avatar>\n      <div\n        style={{\n          maxWidth: \"100%\",\n          textAlign: \"center\",\n          overflow: \"hidden\",\n        }}\n      >\n        <Typography variant={\"h5\"}>Guardian Registration</Typography>\n        <Typography\n          style={{\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden\",\n          }}\n        >\n          {guardianAddress}\n        </Typography>\n      </div>\n\n      <GuardiansDetailsForm\n        guardianAddress={guardianAddress}\n        submitInfo={registerGuardian}\n        guardianInitialInfo={demoInitialInfo}\n        actionButtonTitle={\"Register\"}\n      />\n    </>\n  );\n});\n","import React, { useCallback, useEffect } from \"react\";\nimport { Button, TextField, Typography } from \"@material-ui/core\";\nimport { useBoolean, useNumber } from \"react-hanger\";\nimport { GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS } from \"../../../services/guardiansV2Service/GuardiansV2ServiceConstants\";\nimport { useForm } from \"react-hook-form\";\nimport { config, Transition } from \"react-spring/renderprops-universal\";\n\ninterface IProps {\n  currentFrequencyInHours: number;\n  updateRewardsFrequency: (frequencyInHours: number) => void;\n  isUsingDefaultValue?: boolean;\n}\n\ntype TFormData = {\n  rewardsFrequencyInHours: number;\n};\n\nconst REWARDS_FREQUENCY_MESSAGE = \"Minimum frequency is 12 hours\";\n\nexport const RewardsDistributionFrequencyForm = React.memo<IProps>((props) => {\n  const {\n    currentFrequencyInHours,\n    updateRewardsFrequency,\n    isUsingDefaultValue,\n  } = props;\n\n  // DEV_NOTE : is the value is already not the default one, we will not hide the input element\n  const userWantsToChangeDefault = useBoolean(!isUsingDefaultValue);\n\n  useEffect(() => {\n    if (!isUsingDefaultValue) {\n      userWantsToChangeDefault.setTrue();\n    }\n  }, [isUsingDefaultValue, userWantsToChangeDefault]);\n\n  const frequency = useNumber(\n    Math.max(\n      currentFrequencyInHours,\n      GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS\n    ),\n    {\n      lowerLimit: GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS,\n    }\n  );\n\n  const { register, handleSubmit, errors } = useForm<TFormData>();\n\n  const errorRewardsFrequency = !!errors.rewardsFrequencyInHours;\n\n  const submitUpdate = useCallback(\n    (formData: TFormData) => {\n      updateRewardsFrequency(formData.rewardsFrequencyInHours);\n    },\n    [updateRewardsFrequency]\n  );\n\n  const currentlyUsingText = isUsingDefaultValue\n    ? \"Currently using default value\"\n    : `Current rewards distribution frequency is ${currentFrequencyInHours} hours`;\n\n  return (\n    <form\n      style={{\n        maxWidth: \"100%\",\n        width: \"100%\",\n      }}\n      onSubmit={handleSubmit(submitUpdate)}\n    >\n      <Typography>Default value is 14 days (336 hours)</Typography>\n\n      <br />\n\n      <Transition\n        items={userWantsToChangeDefault.value}\n        // config={config.gentle}\n        initial={null}\n        // immediate={DISABLE_ANIMATIONS}\n\n        from={{\n          // position: \"absolute\",\n          opacity: 0,\n          // transform: \"translateX(1%)\",\n        }}\n        enter={{\n          opacity: 1,\n          // transform: \"translateX(0%)\",\n        }}\n        leave={{\n          opacity: 0,\n          // transform: \"translateX(1%)\",\n          // position: \"absolute\",\n          display: \"none\",\n        }}\n      >\n        {(toggle) =>\n          toggle\n            ? (props) => (\n                <div style={{ ...props, maxWidth: \"100%\", width: \"100%\" }}>\n                  <Typography variant={\"caption\"}>\n                    Minimum value is 12 hours\n                  </Typography>\n                  <Typography color={\"secondary\"}>\n                    {currentlyUsingText}\n                  </Typography>\n                  <TextField\n                    fullWidth\n                    name={\"rewardsFrequencyInHours\"}\n                    title={`Rewards Frequency in hours - Minimum ${GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS} hours`}\n                    label={\"Rewards Frequency in hours\"}\n                    value={frequency.value}\n                    onChange={(e) =>\n                      frequency.setValue(parseInt(e.target.value) || 0)\n                    }\n                    required\n                    type={\"number\"}\n                    inputRef={register({\n                      min: GUARDIAN_REWARDS_FREQUENCY_MINIMUM_VALUE_IN_HOURS,\n                    })}\n                    error={errorRewardsFrequency}\n                    helperText={\n                      errorRewardsFrequency && REWARDS_FREQUENCY_MESSAGE\n                    }\n                  />\n                  <br />\n                  <br />\n                  <Button variant={\"outlined\"} type={\"submit\"} fullWidth>\n                    Update\n                  </Button>\n                </div>\n              )\n            : (props) => (\n                <Button\n                  onClick={userWantsToChangeDefault.setTrue}\n                  variant={\"outlined\"}\n                  fullWidth\n                  style={props}\n                >\n                  Set to other value\n                </Button>\n              )\n        }\n      </Transition>\n    </form>\n  );\n});\n","import React, { useMemo } from \"react\";\nimport { fromUnixTime } from \"date-fns\";\nimport {\n  TGuardianInfo,\n  TGuardianContractInteractionTimes,\n} from \"../../store/OrbsAccountStore\";\nimport { GuardiansDetailsForm } from \"./forms/GuradiansDetailsForm\";\nimport { TGuardianUpdatePayload } from \"../../services/guardiansV2Service/IGuardiansV2Service\";\nimport { Avatar, Paper, Typography } from \"@material-ui/core\";\nimport { RewardsDistributionFrequencyForm } from \"./forms/RewardsDistributionFrequencyForm\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TimelapseIcon from \"@material-ui/icons/Timelapse\";\n\ninterface IProps {\n  currentFrequencyInHours: number;\n  updateRewardsFrequency: (frequencyInHours: number) => void;\n  isUsingDefaultValue?: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n}));\n\nexport const EditRewardsDistributionSection = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    isUsingDefaultValue,\n    currentFrequencyInHours,\n    updateRewardsFrequency,\n  } = props;\n  return (\n    <>\n      <Avatar className={classes.avatar}>\n        <TimelapseIcon />\n      </Avatar>\n      <Typography variant={\"h5\"}>Rewards Distribution Frequency</Typography>\n      <RewardsDistributionFrequencyForm\n        currentFrequencyInHours={currentFrequencyInHours}\n        updateRewardsFrequency={updateRewardsFrequency}\n        isUsingDefaultValue={isUsingDefaultValue}\n      />\n    </>\n  );\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface IProps {}\nconst useStyles = makeStyles((theme) => ({\n  contentFitter: {\n    height: \"100%\",\n    width: \"fit-content\",\n    maxWidth: \"100%\",\n  },\n}));\n\nexport const ContentFitting = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { children } = props;\n  return <div className={classes.contentFitter}>{children}</div>;\n});\n","import React, { useCallback, useMemo } from \"react\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useOrbsAccountStore,\n} from \"../../store/storeHooks\";\nimport { EditGuardianInfoSection } from \"./EditGuardianInfoSection\";\nimport { RegisterGuardianSection } from \"./RegisterGuardianSection\";\nimport { RewardsDistributionFrequencyForm } from \"./forms/RewardsDistributionFrequencyForm\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Avatar,\n  Backdrop,\n  CircularProgress,\n  Divider,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { EditRewardsDistributionSection } from \"./EditRewardsDistributionSection\";\nimport { Page } from \"../../components/structure/Page\";\nimport { ContentFitting } from \"../../components/structure/ContentFitting\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport {\n  TGuardianRegistrationPayload,\n  TGuardianUpdatePayload,\n} from \"../../services/guardiansV2Service/IGuardiansV2Service\";\nimport { useSnackbar } from \"notistack\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n}));\n\nexport const GuardiansRegisterOrEditPage = observer<\n  React.FunctionComponent<IProps>\n>((props) => {\n  const classes = useStyles();\n\n  const { enqueueSnackbar } = useSnackbar();\n  const orbsAccountStore = useOrbsAccountStore();\n  const cryptoWalletIntegrationStore = useCryptoWalletIntegrationStore();\n\n  const title = orbsAccountStore.isGuardian\n    ? \"Guardian details update\"\n    : \"Guardian Registration\";\n  let content;\n\n  const updateGuardianDetails = useCallback(\n    async (guardianRegistrationPayload: TGuardianUpdatePayload) => {\n      try {\n        await orbsAccountStore.updateGuardianInfo(guardianRegistrationPayload);\n      } catch (e) {\n        enqueueSnackbar(`Error in 'Guardian Details Update' TX ${e.message}`, {\n          variant: \"error\",\n        });\n      }\n    },\n    [enqueueSnackbar, orbsAccountStore]\n  );\n\n  const updateRewardsFrequency = useCallback(\n    async (frequencyInHours: number) => {\n      try {\n        await orbsAccountStore.setGuardianDistributionFrequency(\n          frequencyInHours\n        );\n      } catch (e) {\n        enqueueSnackbar(`Error in 'Rewards Frequency Update' TX ${e.message}`, {\n          variant: \"error\",\n        });\n      }\n    },\n    [enqueueSnackbar, orbsAccountStore]\n  );\n\n  const registerGuardian = useCallback(\n    async (guardianRegistrationPayload: TGuardianRegistrationPayload) => {\n      try {\n        await orbsAccountStore.registerGuardian(guardianRegistrationPayload);\n      } catch (e) {\n        enqueueSnackbar(`Error in 'Guardian Registration' TX ${e.message}`, {\n          variant: \"error\",\n        });\n      }\n    },\n    [enqueueSnackbar, orbsAccountStore]\n  );\n\n  // TODO : ORL : Organize all of this loading \"ifs\"\n  if (orbsAccountStore.errorLoading) {\n    return <div>Error loading</div>;\n  }\n\n  if (!orbsAccountStore.doneLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (orbsAccountStore.isGuardian) {\n    content = (\n      <>\n        <EditGuardianInfoSection\n          guardianInfo={orbsAccountStore.guardianInfo}\n          guardianAddress={cryptoWalletIntegrationStore.mainAddress}\n          guardianContractInteractionTimes={\n            orbsAccountStore.guardianContractInteractionTimes\n          }\n          updateGuardianDetails={updateGuardianDetails}\n        />\n\n        <Divider style={{ width: \"100%\", height: \"3px\" }} />\n        <br />\n\n        <EditRewardsDistributionSection\n          currentFrequencyInHours={\n            orbsAccountStore.rewardDistributionFrequencyInHours\n          }\n          updateRewardsFrequency={updateRewardsFrequency}\n          isUsingDefaultValue={orbsAccountStore.isUsingDefaultRewardFrequency}\n        />\n      </>\n    );\n  } else {\n    content = (\n      <RegisterGuardianSection\n        registerGuardian={registerGuardian}\n        guardianAddress={cryptoWalletIntegrationStore.mainAddress}\n      />\n    );\n  }\n\n  return (\n    <Page>\n      <ContentFitting>\n        {/* Content  */}\n        <div\n          style={{\n            display: \"grid\",\n            textAlign: \"center\",\n            maxWidth: \"100%\",\n          }}\n        >\n          {content}\n        </div>\n        <Backdrop\n          className={classes.backdrop}\n          open={orbsAccountStore.txPending}\n        >\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n      </ContentFitting>\n    </Page>\n  );\n});\n","import React from \"react\";\nimport {\n  AppBar,\n  Button,\n  Slide,\n  Toolbar,\n  Typography,\n  useScrollTrigger,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { InTextLink } from \"../InTextLink\";\n\ninterface IProps {\n  version?: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  bottomAppBar: {\n    // paddingTop: \"1em\",\n    // paddingBottom: \"1em\",\n    // borderTop: \"2px solid #363636\",\n    height: \"3em\",\n    bottom: 0,\n    top: \"auto\",\n\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    paddingRight: \"1em\",\n    paddingLeft: \"1em\",\n  },\n\n  appVersion: {\n    marginLeft: \"auto\",\n  },\n}));\n\nconst HideOnScroll = React.memo((props) => {\n  const { children } = props;\n\n  const trigger = useScrollTrigger();\n\n  console.log(trigger);\n\n  return (\n    <Slide appear={false} direction=\"up\" in={trigger}>\n      {children as any}\n    </Slide>\n  );\n});\n\n// DEV_NOTE : O.L : All of the centering (for the links) and margin (for the app version)\n//                  was done in a hacky manner, should fix it in the future.\nexport const Footer = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { version } = props;\n\n  return (\n    <>\n      {/* TODO : This 'Toolbar' is here to keep space between content and footer, should make a better solution */}\n      <Toolbar style={{}} />\n      {/*<HideOnScroll>*/}\n      <AppBar className={classes.bottomAppBar} position={\"fixed\"}>\n        {/*<Toolbar>*/}\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <div\n            style={{\n              marginRight: \"auto\",\n              marginLeft: \"auto\",\n              position: \"absolute\",\n            }}\n          >\n            <InTextLink\n              text={\"Term of use\"}\n              style={{ paddingInlineEnd: \"1em\", justifySelf: \"center\" }}\n            />\n            <InTextLink text={\"Privacy Policy\"} />\n          </div>\n\n          <div className={classes.appVersion}>\n            <Typography variant={\"caption\"}>version {version}</Typography>\n          </div>\n        </div>\n      </AppBar>\n      {/*</HideOnScroll>*/}\n    </>\n  );\n});\n","import React, { useEffect, useMemo } from \"react\";\nimport { ContentContainer } from \"./components/structure/ContentContainer\";\nimport { Route, Switch } from \"react-router-dom\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useOrbsAccountStore,\n} from \"./store/storeHooks\";\nimport { observer } from \"mobx-react\";\nimport { NoEthereumProviderSection } from \"./pages/NoEthereumProviderSection\";\nimport { GuardiansRegisterOrEditPage } from \"./pages/GuardiandRegisterOrEdit/GuardianRegisterOrEditPage\";\nimport { Background } from \"./components/structure/Background\";\nimport { Header } from \"./components/structure/Header\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Page } from \"./components/structure/Page\";\nimport { useSnackbar } from \"notistack\";\nimport { Footer } from \"./components/structure/Footer\";\n\nconst useStyles = makeStyles(() => ({\n  app: {\n    // height: \"100%\",\n    flex: 1,\n  },\n}));\n\nconst App = observer(() => {\n  const classes = useStyles();\n  const cryptoWalletIntegrationStore = useCryptoWalletIntegrationStore();\n  const orbsAccountStore = useOrbsAccountStore();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const isConnected = cryptoWalletIntegrationStore.isConnectedToWallet;\n\n  const appContent = useMemo(() => {\n    if (!isConnected) {\n      return (\n        <Page>\n          <NoEthereumProviderSection\n            walletConnectionPhase={\"connect\"}\n            actionFunction={() => cryptoWalletIntegrationStore.askToConnect()}\n          />\n        </Page>\n      );\n    } else {\n      return (\n        <Switch>\n          <Route path={\"/\"}>\n            <GuardiansRegisterOrEditPage />\n          </Route>\n        </Switch>\n      );\n    }\n  }, [cryptoWalletIntegrationStore, isConnected]);\n\n  // Alert about TX error if happened\n  const txHadError = orbsAccountStore.txHadError;\n  useEffect(() => {\n    if (txHadError) {\n      enqueueSnackbar(\"Error in Transaction\", { variant: \"error\" });\n    }\n  }, [enqueueSnackbar, txHadError]);\n\n  // Alert about TX cancelation  if happened\n  const txCanceled = orbsAccountStore.txCanceled;\n  useEffect(() => {\n    if (txCanceled) {\n      enqueueSnackbar(\"Transaction canceled\", { variant: \"info\" });\n    }\n  }, [enqueueSnackbar, txCanceled]);\n\n  return (\n    <>\n      <Header />\n      <main className={classes.app}>\n        <Background />\n        <ContentContainer id={\"appContainer\"}>{appContent}</ContentContainer>\n        <CssBaseline />\n      </main>\n      <Footer version={\"0.1\"} />\n    </>\n  );\n});\n\nexport default App;\n"],"sourceRoot":""}